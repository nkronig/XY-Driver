
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00000b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  00008af6  00000af6  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000032  00803e00  00803e00  00000b9e  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f9a  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c59  00000000  00000000  00003c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006d4  00000000  00000000  000058c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000018c  00000000  00000000  00005f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000013ca  00000000  00000000  00006124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003a7  00000000  00000000  000074ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00007895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
   2:	39 c0       	rjmp	.+114    	; 0x76 <__bad_interrupt>
   4:	38 c0       	rjmp	.+112    	; 0x76 <__bad_interrupt>
   6:	37 c0       	rjmp	.+110    	; 0x76 <__bad_interrupt>
   8:	36 c0       	rjmp	.+108    	; 0x76 <__bad_interrupt>
   a:	35 c0       	rjmp	.+106    	; 0x76 <__bad_interrupt>
   c:	34 c0       	rjmp	.+104    	; 0x76 <__bad_interrupt>
   e:	33 c0       	rjmp	.+102    	; 0x76 <__bad_interrupt>
  10:	32 c0       	rjmp	.+100    	; 0x76 <__bad_interrupt>
  12:	31 c0       	rjmp	.+98     	; 0x76 <__bad_interrupt>
  14:	30 c0       	rjmp	.+96     	; 0x76 <__bad_interrupt>
  16:	2f c0       	rjmp	.+94     	; 0x76 <__bad_interrupt>
  18:	2e c0       	rjmp	.+92     	; 0x76 <__bad_interrupt>
  1a:	c9 c0       	rjmp	.+402    	; 0x1ae <__vector_13>
  1c:	2c c0       	rjmp	.+88     	; 0x76 <__bad_interrupt>
  1e:	2b c0       	rjmp	.+86     	; 0x76 <__bad_interrupt>
  20:	2a c0       	rjmp	.+84     	; 0x76 <__bad_interrupt>
  22:	29 c0       	rjmp	.+82     	; 0x76 <__bad_interrupt>
  24:	28 c0       	rjmp	.+80     	; 0x76 <__bad_interrupt>
  26:	27 c0       	rjmp	.+78     	; 0x76 <__bad_interrupt>
  28:	26 c0       	rjmp	.+76     	; 0x76 <__bad_interrupt>
  2a:	25 c0       	rjmp	.+74     	; 0x76 <__bad_interrupt>
  2c:	d5 c0       	rjmp	.+426    	; 0x1d8 <__vector_22>
  2e:	23 c0       	rjmp	.+70     	; 0x76 <__bad_interrupt>
  30:	22 c0       	rjmp	.+68     	; 0x76 <__bad_interrupt>
  32:	21 c0       	rjmp	.+66     	; 0x76 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	63 64       	ori	r22, 0x43	; 67
  36:	69 6e       	ori	r22, 0xE9	; 233
  38:	6f 70       	andi	r22, 0x0F	; 15
  3a:	73 75       	andi	r23, 0x53	; 83
  3c:	78 58       	subi	r23, 0x88	; 136
  3e:	5b 00       	.word	0x005b	; ????

00000040 <__ctors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf ef       	ldi	r28, 0xFF	; 255
  46:	cd bf       	out	0x3d, r28	; 61
  48:	df e3       	ldi	r29, 0x3F	; 63
  4a:	de bf       	out	0x3e, r29	; 62

0000004c <__do_copy_data>:
  4c:	1e e3       	ldi	r17, 0x3E	; 62
  4e:	a0 e0       	ldi	r26, 0x00	; 0
  50:	be e3       	ldi	r27, 0x3E	; 62
  52:	ea e0       	ldi	r30, 0x0A	; 10
  54:	fb e0       	ldi	r31, 0x0B	; 11
  56:	02 c0       	rjmp	.+4      	; 0x5c <__do_copy_data+0x10>
  58:	05 90       	lpm	r0, Z+
  5a:	0d 92       	st	X+, r0
  5c:	a0 30       	cpi	r26, 0x00	; 0
  5e:	b1 07       	cpc	r27, r17
  60:	d9 f7       	brne	.-10     	; 0x58 <__do_copy_data+0xc>

00000062 <__do_clear_bss>:
  62:	2e e3       	ldi	r18, 0x3E	; 62
  64:	a0 e0       	ldi	r26, 0x00	; 0
  66:	be e3       	ldi	r27, 0x3E	; 62
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a2 33       	cpi	r26, 0x32	; 50
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>
  72:	06 d1       	rcall	.+524    	; 0x280 <main>
  74:	3e c5       	rjmp	.+2684   	; 0xaf2 <_exit>

00000076 <__bad_interrupt>:
  76:	c4 cf       	rjmp	.-120    	; 0x0 <__vectors>

00000078 <Clamp>:
{
	TCB0.CCMP = 0xFFFF;

	TCB0.INTCTRL = 1 << TCB_CAPT_bp;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | 1 << TCB_ENABLE_bp;
  78:	86 17       	cp	r24, r22
  7a:	97 07       	cpc	r25, r23
  7c:	2c f0       	brlt	.+10     	; 0x88 <__EEPROM_REGION_LENGTH__+0x8>
  7e:	48 17       	cp	r20, r24
  80:	59 07       	cpc	r21, r25
  82:	1c f4       	brge	.+6      	; 0x8a <__EEPROM_REGION_LENGTH__+0xa>
  84:	ca 01       	movw	r24, r20
  86:	08 95       	ret
  88:	cb 01       	movw	r24, r22
  8a:	08 95       	ret

0000008c <timerAInit>:
  8c:	e0 e0       	ldi	r30, 0x00	; 0
  8e:	f2 e0       	ldi	r31, 0x02	; 2
  90:	82 81       	ldd	r24, Z+2	; 0x02
  92:	8f 60       	ori	r24, 0x0F	; 15
  94:	82 83       	std	Z+2, r24	; 0x02
  96:	e0 e0       	ldi	r30, 0x00	; 0
  98:	fa e0       	ldi	r31, 0x0A	; 10
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	86 a3       	std	Z+38, r24	; 0x26
  9e:	87 a3       	std	Z+39, r24	; 0x27
  a0:	83 81       	ldd	r24, Z+3	; 0x03
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	83 83       	std	Z+3, r24	; 0x03
  a6:	81 81       	ldd	r24, Z+1	; 0x01
  a8:	87 61       	ori	r24, 0x17	; 23
  aa:	81 83       	std	Z+1, r24	; 0x01
  ac:	80 81       	ld	r24, Z
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <clkInit>:
}
void clkInit(void){
	CPU_CCP = 0xD8;
  b4:	88 ed       	ldi	r24, 0xD8	; 216
  b6:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0x00;
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	11 82       	std	Z+1, r1	; 0x01
	CPU_CCP = 0xD8;
  be:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCTRLA = 0x02;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 8b       	std	Z+16, r24	; 0x10
  c4:	08 95       	ret

000000c6 <setMotor>:
}
void setMotor(int m, long speed){
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
	if(m == 0){
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	b9 f5       	brne	.+110    	; 0x13c <setMotor+0x76>
		if((~PORTA.IN & 0x20) && (speed > 10)){
  ce:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
  d2:	25 fd       	sbrc	r18, 5
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <setMotor+0x1a>
  d6:	4b 30       	cpi	r20, 0x0B	; 11
  d8:	51 05       	cpc	r21, r1
  da:	61 05       	cpc	r22, r1
  dc:	71 05       	cpc	r23, r1
  de:	14 f4       	brge	.+4      	; 0xe4 <setMotor+0x1e>
			//speed = 300;
		}
		else if((~PORTA.IN & 0x10) && (speed < -10)){
  e0:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
			//speed = 300;
		}
		
		if(speed <= 10 && speed >= -10){
  e4:	8a 01       	movw	r16, r20
  e6:	9b 01       	movw	r18, r22
  e8:	06 5f       	subi	r16, 0xF6	; 246
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	2f 4f       	sbci	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
  f0:	05 31       	cpi	r16, 0x15	; 21
  f2:	11 05       	cpc	r17, r1
  f4:	21 05       	cpc	r18, r1
  f6:	31 05       	cpc	r19, r1
  f8:	28 f4       	brcc	.+10     	; 0x104 <setMotor+0x3e>
			TCA0.SPLIT.LCMP0 = 0;
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	10 a6       	std	Z+40, r1	; 0x28
			TCA0.SPLIT.LCMP1 = 0;
 100:	12 a6       	std	Z+42, r1	; 0x2a
 102:	1c c0       	rjmp	.+56     	; 0x13c <setMotor+0x76>
		}
		else if (speed == 300)
 104:	4c 32       	cpi	r20, 0x2C	; 44
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	52 07       	cpc	r21, r18
 10a:	61 05       	cpc	r22, r1
 10c:	71 05       	cpc	r23, r1
 10e:	31 f4       	brne	.+12     	; 0x11c <setMotor+0x56>
		{
			TCA0.SPLIT.LCMP0 = 255;
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	fa e0       	ldi	r31, 0x0A	; 10
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	20 a7       	std	Z+40, r18	; 0x28
			TCA0.SPLIT.LCMP1 = 255;
 118:	22 a7       	std	Z+42, r18	; 0x2a
 11a:	10 c0       	rjmp	.+32     	; 0x13c <setMotor+0x76>
		}
		else if(speed > 0){
 11c:	14 16       	cp	r1, r20
 11e:	15 06       	cpc	r1, r21
 120:	16 06       	cpc	r1, r22
 122:	17 06       	cpc	r1, r23
 124:	2c f4       	brge	.+10     	; 0x130 <setMotor+0x6a>
			TCA0.SPLIT.LCMP0 = speed;
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	fa e0       	ldi	r31, 0x0A	; 10
 12a:	40 a7       	std	Z+40, r20	; 0x28
			TCA0.SPLIT.LCMP1 = 0;
 12c:	12 a6       	std	Z+42, r1	; 0x2a
 12e:	06 c0       	rjmp	.+12     	; 0x13c <setMotor+0x76>
		}
		else{
			TCA0.SPLIT.LCMP0 = 0;
 130:	e0 e0       	ldi	r30, 0x00	; 0
 132:	fa e0       	ldi	r31, 0x0A	; 10
 134:	10 a6       	std	Z+40, r1	; 0x28
			TCA0.SPLIT.LCMP1 = 255-speed;
 136:	24 2f       	mov	r18, r20
 138:	20 95       	com	r18
 13a:	22 a7       	std	Z+42, r18	; 0x2a
		}
	}
	if(m == 1){
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	a1 f5       	brne	.+104    	; 0x1a8 <setMotor+0xe2>

		if((~PORTA.IN & 0x40) && (speed > 10)){
 140:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 144:	86 fd       	sbrc	r24, 6
 146:	05 c0       	rjmp	.+10     	; 0x152 <setMotor+0x8c>
 148:	4b 30       	cpi	r20, 0x0B	; 11
 14a:	51 05       	cpc	r21, r1
 14c:	61 05       	cpc	r22, r1
 14e:	71 05       	cpc	r23, r1
 150:	14 f4       	brge	.+4      	; 0x156 <setMotor+0x90>
			//speed = 300;
		}
		else if((~PORTA.IN & 0x80) && (speed < -10)){
 152:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
			//speed = 300;
		}
		
		if(speed <= 10 && speed >= -10){
 156:	db 01       	movw	r26, r22
 158:	ca 01       	movw	r24, r20
 15a:	0a 96       	adiw	r24, 0x0a	; 10
 15c:	a1 1d       	adc	r26, r1
 15e:	b1 1d       	adc	r27, r1
 160:	45 97       	sbiw	r24, 0x15	; 21
 162:	a1 05       	cpc	r26, r1
 164:	b1 05       	cpc	r27, r1
 166:	28 f4       	brcc	.+10     	; 0x172 <setMotor+0xac>
			TCA0.SPLIT.LCMP2 = 0;
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	fa e0       	ldi	r31, 0x0A	; 10
 16c:	14 a6       	std	Z+44, r1	; 0x2c
			TCA0.SPLIT.HCMP0 = 0;
 16e:	11 a6       	std	Z+41, r1	; 0x29
 170:	1b c0       	rjmp	.+54     	; 0x1a8 <setMotor+0xe2>
		}
		else if (speed == 300)
 172:	4c 32       	cpi	r20, 0x2C	; 44
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	58 07       	cpc	r21, r24
 178:	61 05       	cpc	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	31 f4       	brne	.+12     	; 0x18a <setMotor+0xc4>
		{
			TCA0.SPLIT.LCMP2 = 255;
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	fa e0       	ldi	r31, 0x0A	; 10
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 a7       	std	Z+44, r24	; 0x2c
			TCA0.SPLIT.HCMP0 = 255;
 186:	81 a7       	std	Z+41, r24	; 0x29
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <setMotor+0xe2>
		}
		else if(speed > 0){
 18a:	14 16       	cp	r1, r20
 18c:	15 06       	cpc	r1, r21
 18e:	16 06       	cpc	r1, r22
 190:	17 06       	cpc	r1, r23
 192:	2c f4       	brge	.+10     	; 0x19e <setMotor+0xd8>
			TCA0.SPLIT.LCMP2 = speed;
 194:	e0 e0       	ldi	r30, 0x00	; 0
 196:	fa e0       	ldi	r31, 0x0A	; 10
 198:	44 a7       	std	Z+44, r20	; 0x2c
			TCA0.SPLIT.HCMP0 = 0;
 19a:	11 a6       	std	Z+41, r1	; 0x29
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <setMotor+0xe2>
		}
		else{
			TCA0.SPLIT.LCMP2 = 0;
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	fa e0       	ldi	r31, 0x0A	; 10
 1a2:	14 a6       	std	Z+44, r1	; 0x2c
			TCA0.SPLIT.HCMP0 = 255-speed;
 1a4:	40 95       	com	r20
 1a6:	41 a7       	std	Z+41, r20	; 0x29
		}
	}
}
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <__vector_13>:
ISR(TCB0_INT_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	
	TCB0_INTFLAGS |= TCB_CAPT_bm;
 1be:	e6 e4       	ldi	r30, 0x46	; 70
 1c0:	fa e0       	ldi	r31, 0x0A	; 10
 1c2:	80 81       	ld	r24, Z
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	80 83       	st	Z, r24
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_22>:
ISR(USART0_RXC_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	if (USART0_STATUS & USART_RXCIF_bm)
 1f0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 1f4:	88 23       	and	r24, r24
 1f6:	c4 f5       	brge	.+112    	; 0x268 <__DATA_REGION_LENGTH__+0x68>
	{
		uint8_t temp;
		temp = USART0_RXDATAL;
 1f8:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
		if(temp == 0x0A || pos >= 19 || temp == 0x00){
 1fc:	8a 30       	cpi	r24, 0x0A	; 10
 1fe:	31 f0       	breq	.+12     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
 200:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <pos>
 204:	93 31       	cpi	r25, 0x13	; 19
 206:	10 f4       	brcc	.+4      	; 0x20c <__DATA_REGION_LENGTH__+0xc>
 208:	81 11       	cpse	r24, r1
 20a:	23 c0       	rjmp	.+70     	; 0x252 <__DATA_REGION_LENGTH__+0x52>
			PORTB.OUTTGL |= 0x40;
 20c:	e0 e2       	ldi	r30, 0x20	; 32
 20e:	f4 e0       	ldi	r31, 0x04	; 4
 210:	87 81       	ldd	r24, Z+7	; 0x07
 212:	80 64       	ori	r24, 0x40	; 64
 214:	87 83       	std	Z+7, r24	; 0x07
			tempRec[pos] = 0x00;
 216:	e0 91 03 3e 	lds	r30, 0x3E03	; 0x803e03 <pos>
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e7 5f       	subi	r30, 0xF7	; 247
 21e:	f1 4c       	sbci	r31, 0xC1	; 193
 220:	10 82       	st	Z, r1
			pos = 0;
 222:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <pos>
			done ++;
 226:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <done>
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <done>
			for (int i = 0; i < BUFFER; i++)
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0a c0       	rjmp	.+20     	; 0x24a <__DATA_REGION_LENGTH__+0x4a>
			{
				rec[i] = tempRec[i];
 236:	fc 01       	movw	r30, r24
 238:	e7 5f       	subi	r30, 0xF7	; 247
 23a:	f1 4c       	sbci	r31, 0xC1	; 193
 23c:	20 81       	ld	r18, Z
 23e:	dc 01       	movw	r26, r24
 240:	a2 5e       	subi	r26, 0xE2	; 226
 242:	b1 4c       	sbci	r27, 0xC1	; 193
 244:	2c 93       	st	X, r18
				tempRec[i]=0;
 246:	10 82       	st	Z, r1
		if(temp == 0x0A || pos >= 19 || temp == 0x00){
			PORTB.OUTTGL |= 0x40;
			tempRec[pos] = 0x00;
			pos = 0;
			done ++;
			for (int i = 0; i < BUFFER; i++)
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	84 31       	cpi	r24, 0x14	; 20
 24c:	91 05       	cpc	r25, r1
 24e:	9c f3       	brlt	.-26     	; 0x236 <__DATA_REGION_LENGTH__+0x36>
 250:	0b c0       	rjmp	.+22     	; 0x268 <__DATA_REGION_LENGTH__+0x68>
				tempRec[i]=0;
			}
		}
		else
		{
			tempRec[pos] = temp;
 252:	e0 91 03 3e 	lds	r30, 0x3E03	; 0x803e03 <pos>
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	e7 5f       	subi	r30, 0xF7	; 247
 25a:	f1 4c       	sbci	r31, 0xC1	; 193
 25c:	80 83       	st	Z, r24
			pos ++;
 25e:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <pos>
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <pos>
		}
		
	}
	//USART0_STATUS |= USART_RXCIF_bm;
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <main>:
int main(void)
{
	PORTA.DIR &= 0x00;
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f4 e0       	ldi	r31, 0x04	; 4
 284:	80 81       	ld	r24, Z
 286:	10 82       	st	Z, r1
	
	PORTB.DIR |= 0x78; // 0x38
 288:	e0 e2       	ldi	r30, 0x20	; 32
 28a:	f4 e0       	ldi	r31, 0x04	; 4
 28c:	80 81       	ld	r24, Z
 28e:	88 67       	ori	r24, 0x78	; 120
 290:	80 83       	st	Z, r24
	PORTC.DIR |= 0x08;
 292:	e0 e4       	ldi	r30, 0x40	; 64
 294:	f4 e0       	ldi	r31, 0x04	; 4
 296:	80 81       	ld	r24, Z
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	80 83       	st	Z, r24
	clkInit();
 29c:	0b df       	rcall	.-490    	; 0xb4 <clkInit>
	//timerBInit();
	timerAInit();
 29e:	f6 de       	rcall	.-532    	; 0x8c <timerAInit>
	
	USART_init();
 2a0:	7b d0       	rcall	.+246    	; 0x398 <USART_init>
	printString("start");
 2a2:	86 ef       	ldi	r24, 0xF6	; 246
 2a4:	9a e8       	ldi	r25, 0x8A	; 138
 2a6:	9c d0       	rcall	.+312    	; 0x3e0 <printString>
	
	sei();
 2a8:	78 94       	sei
	while (1)
	{
		//_delay_ms(100);
		//printString("start");
		if (done >= 1)
 2aa:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <done>
 2ae:	88 23       	and	r24, r24
 2b0:	e1 f3       	breq	.-8      	; 0x2aa <main+0x2a>
		{
			
			if (rec[0] == '!')
 2b2:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <rec>
 2b6:	81 32       	cpi	r24, 0x21	; 33
 2b8:	09 f0       	breq	.+2      	; 0x2bc <main+0x3c>
 2ba:	6b c0       	rjmp	.+214    	; 0x392 <main+0x112>
			{
				char *command = strtok(rec, "?");
 2bc:	6c ef       	ldi	r22, 0xFC	; 252
 2be:	7a e8       	ldi	r23, 0x8A	; 138
 2c0:	8e e1       	ldi	r24, 0x1E	; 30
 2c2:	9e e3       	ldi	r25, 0x3E	; 62
 2c4:	9f d0       	rcall	.+318    	; 0x404 <strtok>
 2c6:	ec 01       	movw	r28, r24
				if ((strcmp(command, "!x") == 0))
 2c8:	6e ef       	ldi	r22, 0xFE	; 254
 2ca:	7a e8       	ldi	r23, 0x8A	; 138
 2cc:	9f d0       	rcall	.+318    	; 0x40c <strcmp>
 2ce:	89 2b       	or	r24, r25
 2d0:	69 f5       	brne	.+90     	; 0x32c <main+0xac>
				{
					char *command2 = strtok(0, "?");
 2d2:	6c ef       	ldi	r22, 0xFC	; 252
 2d4:	7a e8       	ldi	r23, 0x8A	; 138
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	94 d0       	rcall	.+296    	; 0x404 <strtok>
					sscanf(command2, "%2hhx", &tmp);
 2dc:	28 e0       	ldi	r18, 0x08	; 8
 2de:	3e e3       	ldi	r19, 0x3E	; 62
 2e0:	3f 93       	push	r19
 2e2:	2f 93       	push	r18
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	3b e8       	ldi	r19, 0x8B	; 139
 2e8:	3f 93       	push	r19
 2ea:	2f 93       	push	r18
 2ec:	9f 93       	push	r25
 2ee:	8f 93       	push	r24
 2f0:	bd d0       	rcall	.+378    	; 0x46c <sscanf>
					
					m1Speed = Clamp(tmp,-255,255);
 2f2:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <tmp>
 2f6:	4f ef       	ldi	r20, 0xFF	; 255
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	7f ef       	ldi	r23, 0xFF	; 255
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	bb de       	rcall	.-650    	; 0x78 <Clamp>
 302:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <m1Speed>
 306:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <m1Speed+0x1>
					setMotor(0,m1Speed);
 30a:	40 91 06 3e 	lds	r20, 0x3E06	; 0x803e06 <m1Speed>
 30e:	50 91 07 3e 	lds	r21, 0x3E07	; 0x803e07 <m1Speed+0x1>
 312:	05 2e       	mov	r0, r21
 314:	00 0c       	add	r0, r0
 316:	66 0b       	sbc	r22, r22
 318:	77 0b       	sbc	r23, r23
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	d3 de       	rcall	.-602    	; 0xc6 <setMotor>
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
				}
				if ((strcmp(command, "!y") == 0))
 32c:	67 e0       	ldi	r22, 0x07	; 7
 32e:	7b e8       	ldi	r23, 0x8B	; 139
 330:	ce 01       	movw	r24, r28
 332:	6c d0       	rcall	.+216    	; 0x40c <strcmp>
 334:	89 2b       	or	r24, r25
 336:	69 f5       	brne	.+90     	; 0x392 <main+0x112>
				{
					char *command2 = strtok(0, "?");
 338:	6c ef       	ldi	r22, 0xFC	; 252
 33a:	7a e8       	ldi	r23, 0x8A	; 138
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	61 d0       	rcall	.+194    	; 0x404 <strtok>
					sscanf(command2, "%2hhx", &tmp);
 342:	28 e0       	ldi	r18, 0x08	; 8
 344:	3e e3       	ldi	r19, 0x3E	; 62
 346:	3f 93       	push	r19
 348:	2f 93       	push	r18
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	3b e8       	ldi	r19, 0x8B	; 139
 34e:	3f 93       	push	r19
 350:	2f 93       	push	r18
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	8a d0       	rcall	.+276    	; 0x46c <sscanf>
					
					m2Speed = Clamp(tmp,-255,255);
 358:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <tmp>
 35c:	4f ef       	ldi	r20, 0xFF	; 255
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	7f ef       	ldi	r23, 0xFF	; 255
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	88 de       	rcall	.-752    	; 0x78 <Clamp>
 368:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <m2Speed>
 36c:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <m2Speed+0x1>
					setMotor(1,m2Speed);
 370:	40 91 04 3e 	lds	r20, 0x3E04	; 0x803e04 <m2Speed>
 374:	50 91 05 3e 	lds	r21, 0x3E05	; 0x803e05 <m2Speed+0x1>
 378:	05 2e       	mov	r0, r21
 37a:	00 0c       	add	r0, r0
 37c:	66 0b       	sbc	r22, r22
 37e:	77 0b       	sbc	r23, r23
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	a0 de       	rcall	.-704    	; 0xc6 <setMotor>
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
				}
			}
			done = 0;
 392:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <done>
 396:	89 cf       	rjmp	.-238    	; 0x2aa <main+0x2a>

00000398 <USART_init>:
#include <avr/io.h>
#include "UART.h"

int8_t USART_init(){
	PORTA.DIRSET = PIN1_bm; // TX pin as output
 398:	e0 e0       	ldi	r30, 0x00	; 0
 39a:	f4 e0       	ldi	r31, 0x04	; 4
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN1_bm; //
 3a0:	86 83       	std	Z+6, r24	; 0x06

	PORTA.DIRCLR = PIN2_bm; // RX pin set as input
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Leave it as pulled-off
 3a6:	82 89       	ldd	r24, Z+18	; 0x12
 3a8:	87 7f       	andi	r24, 0xF7	; 247
 3aa:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTMUX.CTRLB |= PORTMUX_USART0_bm;
 3ac:	e0 e0       	ldi	r30, 0x00	; 0
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	81 81       	ldd	r24, Z+1	; 0x01
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	81 83       	std	Z+1, r24	; 0x01

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(19200); /* set baud rate register */
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	f8 e0       	ldi	r31, 0x08	; 8
 3ba:	86 e4       	ldi	r24, 0x46	; 70
 3bc:	90 e1       	ldi	r25, 0x10	; 16
 3be:	80 87       	std	Z+8, r24	; 0x08
 3c0:	91 87       	std	Z+9, r25	; 0x09

	USART0.CTRLA = USART_RXCIE_bm;
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	85 83       	std	Z+5, r24	; 0x05
	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 3c6:	80 ec       	ldi	r24, 0xC0	; 192
 3c8:	86 83       	std	Z+6, r24	; 0x06
	| 1 << USART_RXEN_bp     /* Receiver enable: enabled */
	| USART_RXMODE_NORMAL_gc /* Normal mode */
	| 0 << USART_SFDEN_bp    /* Start Frame Detection Enable: disabled */
	| 1 << USART_TXEN_bp;    /* Transmitter Enable: enabled */

	USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc /* Asynchronous Mode */
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	87 83       	std	Z+7, r24	; 0x07
	| USART_PMODE_DISABLED_gc /* No Parity */
	| USART_SBMODE_1BIT_gc; /* 1 stop bit */


	return 0;
}
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret

000003d2 <USART_write>:

void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm));
 3d2:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 3d6:	95 ff       	sbrs	r25, 5
 3d8:	fc cf       	rjmp	.-8      	; 0x3d2 <USART_write>
	USART0.TXDATAL = data;
 3da:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 3de:	08 95       	ret

000003e0 <printString>:
}

void printString(const char myString[]) {
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
	while (myString[i]) {
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <printString+0x10>
		USART_write((int)myString[i]);
 3ec:	f2 df       	rcall	.-28     	; 0x3d2 <USART_write>
		//sendChar(myString[i]);
		i++;
 3ee:	cf 5f       	subi	r28, 0xFF	; 255
	USART0.TXDATAL = data;
}

void printString(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 3f0:	f8 01       	movw	r30, r16
 3f2:	ec 0f       	add	r30, r28
 3f4:	f1 1d       	adc	r31, r1
 3f6:	80 81       	ld	r24, Z
 3f8:	81 11       	cpse	r24, r1
 3fa:	f8 cf       	rjmp	.-16     	; 0x3ec <printString+0xc>
		USART_write((int)myString[i]);
		//sendChar(myString[i]);
		i++;
	}
}
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <strtok>:
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	5e e3       	ldi	r21, 0x3E	; 62
 408:	0a d0       	rcall	.+20     	; 0x41e <strtok_r>
 40a:	08 95       	ret

0000040c <strcmp>:
 40c:	fb 01       	movw	r30, r22
 40e:	dc 01       	movw	r26, r24
 410:	8d 91       	ld	r24, X+
 412:	01 90       	ld	r0, Z+
 414:	80 19       	sub	r24, r0
 416:	01 10       	cpse	r0, r1
 418:	d9 f3       	breq	.-10     	; 0x410 <strcmp+0x4>
 41a:	99 0b       	sbc	r25, r25
 41c:	08 95       	ret

0000041e <strtok_r>:
 41e:	fa 01       	movw	r30, r20
 420:	a1 91       	ld	r26, Z+
 422:	b0 81       	ld	r27, Z
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	19 f4       	brne	.+6      	; 0x42e <strtok_r+0x10>
 428:	10 97       	sbiw	r26, 0x00	; 0
 42a:	e1 f0       	breq	.+56     	; 0x464 <strtok_r+0x46>
 42c:	cd 01       	movw	r24, r26
 42e:	dc 01       	movw	r26, r24
 430:	cd 01       	movw	r24, r26
 432:	0d 90       	ld	r0, X+
 434:	00 20       	and	r0, r0
 436:	11 f4       	brne	.+4      	; 0x43c <strtok_r+0x1e>
 438:	c0 01       	movw	r24, r0
 43a:	13 c0       	rjmp	.+38     	; 0x462 <strtok_r+0x44>
 43c:	fb 01       	movw	r30, r22
 43e:	21 91       	ld	r18, Z+
 440:	22 23       	and	r18, r18
 442:	19 f0       	breq	.+6      	; 0x44a <strtok_r+0x2c>
 444:	20 15       	cp	r18, r0
 446:	d9 f7       	brne	.-10     	; 0x43e <strtok_r+0x20>
 448:	f3 cf       	rjmp	.-26     	; 0x430 <strtok_r+0x12>
 44a:	fb 01       	movw	r30, r22
 44c:	21 91       	ld	r18, Z+
 44e:	20 15       	cp	r18, r0
 450:	19 f4       	brne	.+6      	; 0x458 <strtok_r+0x3a>
 452:	1e 92       	st	-X, r1
 454:	11 96       	adiw	r26, 0x01	; 1
 456:	06 c0       	rjmp	.+12     	; 0x464 <strtok_r+0x46>
 458:	22 23       	and	r18, r18
 45a:	c1 f7       	brne	.-16     	; 0x44c <strtok_r+0x2e>
 45c:	0d 90       	ld	r0, X+
 45e:	00 20       	and	r0, r0
 460:	a1 f7       	brne	.-24     	; 0x44a <strtok_r+0x2c>
 462:	d0 01       	movw	r26, r0
 464:	fa 01       	movw	r30, r20
 466:	a1 93       	st	Z+, r26
 468:	b0 83       	st	Z, r27
 46a:	08 95       	ret

0000046c <sscanf>:
 46c:	ae e0       	ldi	r26, 0x0E	; 14
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	eb e3       	ldi	r30, 0x3B	; 59
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	1d c3       	rjmp	.+1594   	; 0xab0 <__prologue_saves__+0x20>
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	8c 83       	std	Y+4, r24	; 0x04
 47a:	8b 89       	ldd	r24, Y+19	; 0x13
 47c:	9c 89       	ldd	r25, Y+20	; 0x14
 47e:	89 83       	std	Y+1, r24	; 0x01
 480:	9a 83       	std	Y+2, r25	; 0x02
 482:	ae 01       	movw	r20, r28
 484:	49 5e       	subi	r20, 0xE9	; 233
 486:	5f 4f       	sbci	r21, 0xFF	; 255
 488:	6d 89       	ldd	r22, Y+21	; 0x15
 48a:	7e 89       	ldd	r23, Y+22	; 0x16
 48c:	ce 01       	movw	r24, r28
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	90 d1       	rcall	.+800    	; 0x7b2 <vfscanf>
 492:	2e 96       	adiw	r28, 0x0e	; 14
 494:	e2 e0       	ldi	r30, 0x02	; 2
 496:	25 c3       	rjmp	.+1610   	; 0xae2 <__epilogue_restores__+0x20>

00000498 <putval>:
 498:	20 fd       	sbrc	r18, 0
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <putval+0x16>
 49c:	fc 01       	movw	r30, r24
 49e:	23 fd       	sbrc	r18, 3
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <putval+0x14>
 4a2:	22 ff       	sbrs	r18, 2
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <putval+0x12>
 4a6:	73 83       	std	Z+3, r23	; 0x03
 4a8:	62 83       	std	Z+2, r22	; 0x02
 4aa:	51 83       	std	Z+1, r21	; 0x01
 4ac:	40 83       	st	Z, r20
 4ae:	08 95       	ret

000004b0 <mulacc>:
 4b0:	44 fd       	sbrc	r20, 4
 4b2:	17 c0       	rjmp	.+46     	; 0x4e2 <mulacc+0x32>
 4b4:	46 fd       	sbrc	r20, 6
 4b6:	17 c0       	rjmp	.+46     	; 0x4e6 <mulacc+0x36>
 4b8:	ab 01       	movw	r20, r22
 4ba:	bc 01       	movw	r22, r24
 4bc:	da 01       	movw	r26, r20
 4be:	fb 01       	movw	r30, r22
 4c0:	aa 0f       	add	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	ee 1f       	adc	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	10 94       	com	r1
 4ca:	d1 f7       	brne	.-12     	; 0x4c0 <mulacc+0x10>
 4cc:	4a 0f       	add	r20, r26
 4ce:	5b 1f       	adc	r21, r27
 4d0:	6e 1f       	adc	r22, r30
 4d2:	7f 1f       	adc	r23, r31
 4d4:	cb 01       	movw	r24, r22
 4d6:	ba 01       	movw	r22, r20
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <mulacc+0x44>
 4e2:	33 e0       	ldi	r19, 0x03	; 3
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <mulacc+0x38>
 4e6:	34 e0       	ldi	r19, 0x04	; 4
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	31 50       	subi	r19, 0x01	; 1
 4f2:	d1 f7       	brne	.-12     	; 0x4e8 <mulacc+0x38>
 4f4:	62 0f       	add	r22, r18
 4f6:	71 1d       	adc	r23, r1
 4f8:	81 1d       	adc	r24, r1
 4fa:	91 1d       	adc	r25, r1
 4fc:	08 95       	ret

000004fe <skip_spaces>:
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	8c 01       	movw	r16, r24
 508:	c8 01       	movw	r24, r16
 50a:	68 d2       	rcall	.+1232   	; 0x9dc <fgetc>
 50c:	ec 01       	movw	r28, r24
 50e:	97 fd       	sbrc	r25, 7
 510:	06 c0       	rjmp	.+12     	; 0x51e <skip_spaces+0x20>
 512:	50 d2       	rcall	.+1184   	; 0x9b4 <isspace>
 514:	89 2b       	or	r24, r25
 516:	c1 f7       	brne	.-16     	; 0x508 <skip_spaces+0xa>
 518:	b8 01       	movw	r22, r16
 51a:	ce 01       	movw	r24, r28
 51c:	9d d2       	rcall	.+1338   	; 0xa58 <ungetc>
 51e:	ce 01       	movw	r24, r28
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <conv_int>:
 52a:	8f 92       	push	r8
 52c:	9f 92       	push	r9
 52e:	af 92       	push	r10
 530:	bf 92       	push	r11
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	1f 93       	push	r17
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	8c 01       	movw	r16, r24
 540:	d6 2f       	mov	r29, r22
 542:	7a 01       	movw	r14, r20
 544:	b2 2e       	mov	r11, r18
 546:	4a d2       	rcall	.+1172   	; 0x9dc <fgetc>
 548:	9c 01       	movw	r18, r24
 54a:	33 27       	eor	r19, r19
 54c:	2b 32       	cpi	r18, 0x2B	; 43
 54e:	31 05       	cpc	r19, r1
 550:	31 f0       	breq	.+12     	; 0x55e <conv_int+0x34>
 552:	2d 32       	cpi	r18, 0x2D	; 45
 554:	31 05       	cpc	r19, r1
 556:	59 f4       	brne	.+22     	; 0x56e <conv_int+0x44>
 558:	8b 2d       	mov	r24, r11
 55a:	80 68       	ori	r24, 0x80	; 128
 55c:	b8 2e       	mov	r11, r24
 55e:	d1 50       	subi	r29, 0x01	; 1
 560:	11 f4       	brne	.+4      	; 0x566 <conv_int+0x3c>
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	61 c0       	rjmp	.+194    	; 0x628 <conv_int+0xfe>
 566:	c8 01       	movw	r24, r16
 568:	39 d2       	rcall	.+1138   	; 0x9dc <fgetc>
 56a:	97 fd       	sbrc	r25, 7
 56c:	fa cf       	rjmp	.-12     	; 0x562 <conv_int+0x38>
 56e:	cb 2d       	mov	r28, r11
 570:	cd 7f       	andi	r28, 0xFD	; 253
 572:	2b 2d       	mov	r18, r11
 574:	20 73       	andi	r18, 0x30	; 48
 576:	f9 f4       	brne	.+62     	; 0x5b6 <conv_int+0x8c>
 578:	80 33       	cpi	r24, 0x30	; 48
 57a:	e9 f4       	brne	.+58     	; 0x5b6 <conv_int+0x8c>
 57c:	aa 24       	eor	r10, r10
 57e:	aa 94       	dec	r10
 580:	ad 0e       	add	r10, r29
 582:	09 f4       	brne	.+2      	; 0x586 <conv_int+0x5c>
 584:	3e c0       	rjmp	.+124    	; 0x602 <conv_int+0xd8>
 586:	c8 01       	movw	r24, r16
 588:	29 d2       	rcall	.+1106   	; 0x9dc <fgetc>
 58a:	97 fd       	sbrc	r25, 7
 58c:	3a c0       	rjmp	.+116    	; 0x602 <conv_int+0xd8>
 58e:	9c 01       	movw	r18, r24
 590:	2f 7d       	andi	r18, 0xDF	; 223
 592:	33 27       	eor	r19, r19
 594:	28 35       	cpi	r18, 0x58	; 88
 596:	31 05       	cpc	r19, r1
 598:	41 f4       	brne	.+16     	; 0x5aa <conv_int+0x80>
 59a:	c2 64       	ori	r28, 0x42	; 66
 59c:	d2 50       	subi	r29, 0x02	; 2
 59e:	89 f1       	breq	.+98     	; 0x602 <conv_int+0xd8>
 5a0:	c8 01       	movw	r24, r16
 5a2:	1c d2       	rcall	.+1080   	; 0x9dc <fgetc>
 5a4:	97 ff       	sbrs	r25, 7
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <conv_int+0x8c>
 5a8:	2c c0       	rjmp	.+88     	; 0x602 <conv_int+0xd8>
 5aa:	b6 fe       	sbrs	r11, 6
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <conv_int+0x88>
 5ae:	c2 60       	ori	r28, 0x02	; 2
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <conv_int+0x8a>
 5b2:	c2 61       	ori	r28, 0x12	; 18
 5b4:	da 2d       	mov	r29, r10
 5b6:	81 2c       	mov	r8, r1
 5b8:	91 2c       	mov	r9, r1
 5ba:	54 01       	movw	r10, r8
 5bc:	20 ed       	ldi	r18, 0xD0	; 208
 5be:	28 0f       	add	r18, r24
 5c0:	28 30       	cpi	r18, 0x08	; 8
 5c2:	78 f0       	brcs	.+30     	; 0x5e2 <conv_int+0xb8>
 5c4:	c4 ff       	sbrs	r28, 4
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <conv_int+0xa4>
 5c8:	b8 01       	movw	r22, r16
 5ca:	46 d2       	rcall	.+1164   	; 0xa58 <ungetc>
 5cc:	17 c0       	rjmp	.+46     	; 0x5fc <conv_int+0xd2>
 5ce:	2a 30       	cpi	r18, 0x0A	; 10
 5d0:	40 f0       	brcs	.+16     	; 0x5e2 <conv_int+0xb8>
 5d2:	c6 ff       	sbrs	r28, 6
 5d4:	f9 cf       	rjmp	.-14     	; 0x5c8 <conv_int+0x9e>
 5d6:	2f 7d       	andi	r18, 0xDF	; 223
 5d8:	3f ee       	ldi	r19, 0xEF	; 239
 5da:	32 0f       	add	r19, r18
 5dc:	36 30       	cpi	r19, 0x06	; 6
 5de:	a0 f7       	brcc	.-24     	; 0x5c8 <conv_int+0x9e>
 5e0:	27 50       	subi	r18, 0x07	; 7
 5e2:	4c 2f       	mov	r20, r28
 5e4:	c5 01       	movw	r24, r10
 5e6:	b4 01       	movw	r22, r8
 5e8:	63 df       	rcall	.-314    	; 0x4b0 <mulacc>
 5ea:	4b 01       	movw	r8, r22
 5ec:	5c 01       	movw	r10, r24
 5ee:	c2 60       	ori	r28, 0x02	; 2
 5f0:	d1 50       	subi	r29, 0x01	; 1
 5f2:	51 f0       	breq	.+20     	; 0x608 <conv_int+0xde>
 5f4:	c8 01       	movw	r24, r16
 5f6:	f2 d1       	rcall	.+996    	; 0x9dc <fgetc>
 5f8:	97 ff       	sbrs	r25, 7
 5fa:	e0 cf       	rjmp	.-64     	; 0x5bc <conv_int+0x92>
 5fc:	c1 fd       	sbrc	r28, 1
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <conv_int+0xde>
 600:	b0 cf       	rjmp	.-160    	; 0x562 <conv_int+0x38>
 602:	81 2c       	mov	r8, r1
 604:	91 2c       	mov	r9, r1
 606:	54 01       	movw	r10, r8
 608:	c7 ff       	sbrs	r28, 7
 60a:	08 c0       	rjmp	.+16     	; 0x61c <conv_int+0xf2>
 60c:	b0 94       	com	r11
 60e:	a0 94       	com	r10
 610:	90 94       	com	r9
 612:	80 94       	com	r8
 614:	81 1c       	adc	r8, r1
 616:	91 1c       	adc	r9, r1
 618:	a1 1c       	adc	r10, r1
 61a:	b1 1c       	adc	r11, r1
 61c:	2c 2f       	mov	r18, r28
 61e:	b5 01       	movw	r22, r10
 620:	a4 01       	movw	r20, r8
 622:	c7 01       	movw	r24, r14
 624:	39 df       	rcall	.-398    	; 0x498 <putval>
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	bf 90       	pop	r11
 636:	af 90       	pop	r10
 638:	9f 90       	pop	r9
 63a:	8f 90       	pop	r8
 63c:	08 95       	ret

0000063e <conv_brk>:
 63e:	a0 e2       	ldi	r26, 0x20	; 32
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e4 e2       	ldi	r30, 0x24	; 36
 644:	f3 e0       	ldi	r31, 0x03	; 3
 646:	27 c2       	rjmp	.+1102   	; 0xa96 <__prologue_saves__+0x6>
 648:	5c 01       	movw	r10, r24
 64a:	96 2e       	mov	r9, r22
 64c:	7a 01       	movw	r14, r20
 64e:	f9 01       	movw	r30, r18
 650:	8e 01       	movw	r16, r28
 652:	0f 5f       	subi	r16, 0xFF	; 255
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	68 01       	movw	r12, r16
 658:	80 e2       	ldi	r24, 0x20	; 32
 65a:	d8 01       	movw	r26, r16
 65c:	1d 92       	st	X+, r1
 65e:	8a 95       	dec	r24
 660:	e9 f7       	brne	.-6      	; 0x65c <conv_brk+0x1e>
 662:	d5 01       	movw	r26, r10
 664:	13 96       	adiw	r26, 0x03	; 3
 666:	8c 90       	ld	r8, X
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	61 2c       	mov	r6, r1
 66e:	71 2c       	mov	r7, r1
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	83 fc       	sbrc	r8, 3
 678:	25 91       	lpm	r18, Z+
 67a:	83 fe       	sbrs	r8, 3
 67c:	21 91       	ld	r18, Z+
 67e:	8f 01       	movw	r16, r30
 680:	52 2e       	mov	r5, r18
 682:	21 11       	cpse	r18, r1
 684:	03 c0       	rjmp	.+6      	; 0x68c <conv_brk+0x4e>
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	90 c0       	rjmp	.+288    	; 0x7ac <conv_brk+0x16e>
 68c:	2e 35       	cpi	r18, 0x5E	; 94
 68e:	11 f4       	brne	.+4      	; 0x694 <conv_brk+0x56>
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	51 f1       	breq	.+84     	; 0x6e8 <conv_brk+0xaa>
 694:	43 2f       	mov	r20, r19
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	48 17       	cp	r20, r24
 69a:	59 07       	cpc	r21, r25
 69c:	3c f4       	brge	.+14     	; 0x6ac <conv_brk+0x6e>
 69e:	2d 35       	cpi	r18, 0x5D	; 93
 6a0:	59 f1       	breq	.+86     	; 0x6f8 <conv_brk+0xba>
 6a2:	2d 32       	cpi	r18, 0x2D	; 45
 6a4:	19 f4       	brne	.+6      	; 0x6ac <conv_brk+0x6e>
 6a6:	77 20       	and	r7, r7
 6a8:	09 f1       	breq	.+66     	; 0x6ec <conv_brk+0xae>
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <conv_brk+0x74>
 6ac:	77 20       	and	r7, r7
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <conv_brk+0x74>
 6b0:	68 c0       	rjmp	.+208    	; 0x782 <conv_brk+0x144>
 6b2:	45 2d       	mov	r20, r5
 6b4:	46 95       	lsr	r20
 6b6:	46 95       	lsr	r20
 6b8:	46 95       	lsr	r20
 6ba:	d6 01       	movw	r26, r12
 6bc:	a4 0f       	add	r26, r20
 6be:	b1 1d       	adc	r27, r1
 6c0:	45 2d       	mov	r20, r5
 6c2:	47 70       	andi	r20, 0x07	; 7
 6c4:	8b 01       	movw	r16, r22
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <conv_brk+0x8e>
 6c8:	00 0f       	add	r16, r16
 6ca:	11 1f       	adc	r17, r17
 6cc:	4a 95       	dec	r20
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <conv_brk+0x8a>
 6d0:	a8 01       	movw	r20, r16
 6d2:	5c 91       	ld	r21, X
 6d4:	45 2b       	or	r20, r21
 6d6:	4c 93       	st	X, r20
 6d8:	65 14       	cp	r6, r5
 6da:	59 f0       	breq	.+22     	; 0x6f2 <conv_brk+0xb4>
 6dc:	56 14       	cp	r5, r6
 6de:	10 f4       	brcc	.+4      	; 0x6e4 <conv_brk+0xa6>
 6e0:	53 94       	inc	r5
 6e2:	e7 cf       	rjmp	.-50     	; 0x6b2 <conv_brk+0x74>
 6e4:	5a 94       	dec	r5
 6e6:	e5 cf       	rjmp	.-54     	; 0x6b2 <conv_brk+0x74>
 6e8:	31 e0       	ldi	r19, 0x01	; 1
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <conv_brk+0xb6>
 6ec:	77 24       	eor	r7, r7
 6ee:	73 94       	inc	r7
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <conv_brk+0xb6>
 6f2:	71 2c       	mov	r7, r1
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	bf cf       	rjmp	.-130    	; 0x676 <conv_brk+0x38>
 6f8:	77 20       	and	r7, r7
 6fa:	19 f0       	breq	.+6      	; 0x702 <conv_brk+0xc4>
 6fc:	8e 81       	ldd	r24, Y+6	; 0x06
 6fe:	80 62       	ori	r24, 0x20	; 32
 700:	8e 83       	std	Y+6, r24	; 0x06
 702:	31 11       	cpse	r19, r1
 704:	03 c0       	rjmp	.+6      	; 0x70c <conv_brk+0xce>
 706:	88 24       	eor	r8, r8
 708:	83 94       	inc	r8
 70a:	17 c0       	rjmp	.+46     	; 0x73a <conv_brk+0xfc>
 70c:	f6 01       	movw	r30, r12
 70e:	9e 01       	movw	r18, r28
 710:	2f 5d       	subi	r18, 0xDF	; 223
 712:	3f 4f       	sbci	r19, 0xFF	; 255
 714:	80 81       	ld	r24, Z
 716:	80 95       	com	r24
 718:	81 93       	st	Z+, r24
 71a:	2e 17       	cp	r18, r30
 71c:	3f 07       	cpc	r19, r31
 71e:	d1 f7       	brne	.-12     	; 0x714 <conv_brk+0xd6>
 720:	f2 cf       	rjmp	.-28     	; 0x706 <conv_brk+0xc8>
 722:	e1 14       	cp	r14, r1
 724:	f1 04       	cpc	r15, r1
 726:	29 f0       	breq	.+10     	; 0x732 <conv_brk+0xf4>
 728:	d7 01       	movw	r26, r14
 72a:	8c 93       	st	X, r24
 72c:	f7 01       	movw	r30, r14
 72e:	31 96       	adiw	r30, 0x01	; 1
 730:	7f 01       	movw	r14, r30
 732:	9a 94       	dec	r9
 734:	81 2c       	mov	r8, r1
 736:	99 20       	and	r9, r9
 738:	e9 f0       	breq	.+58     	; 0x774 <conv_brk+0x136>
 73a:	c5 01       	movw	r24, r10
 73c:	4f d1       	rcall	.+670    	; 0x9dc <fgetc>
 73e:	97 fd       	sbrc	r25, 7
 740:	17 c0       	rjmp	.+46     	; 0x770 <conv_brk+0x132>
 742:	fc 01       	movw	r30, r24
 744:	ff 27       	eor	r31, r31
 746:	23 e0       	ldi	r18, 0x03	; 3
 748:	f5 95       	asr	r31
 74a:	e7 95       	ror	r30
 74c:	2a 95       	dec	r18
 74e:	e1 f7       	brne	.-8      	; 0x748 <conv_brk+0x10a>
 750:	ec 0d       	add	r30, r12
 752:	fd 1d       	adc	r31, r13
 754:	20 81       	ld	r18, Z
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	ac 01       	movw	r20, r24
 75a:	47 70       	andi	r20, 0x07	; 7
 75c:	55 27       	eor	r21, r21
 75e:	02 c0       	rjmp	.+4      	; 0x764 <conv_brk+0x126>
 760:	35 95       	asr	r19
 762:	27 95       	ror	r18
 764:	4a 95       	dec	r20
 766:	e2 f7       	brpl	.-8      	; 0x760 <conv_brk+0x122>
 768:	20 fd       	sbrc	r18, 0
 76a:	db cf       	rjmp	.-74     	; 0x722 <conv_brk+0xe4>
 76c:	b5 01       	movw	r22, r10
 76e:	74 d1       	rcall	.+744    	; 0xa58 <ungetc>
 770:	81 10       	cpse	r8, r1
 772:	89 cf       	rjmp	.-238    	; 0x686 <conv_brk+0x48>
 774:	e1 14       	cp	r14, r1
 776:	f1 04       	cpc	r15, r1
 778:	11 f0       	breq	.+4      	; 0x77e <conv_brk+0x140>
 77a:	d7 01       	movw	r26, r14
 77c:	1c 92       	st	X, r1
 77e:	c8 01       	movw	r24, r16
 780:	15 c0       	rjmp	.+42     	; 0x7ac <conv_brk+0x16e>
 782:	42 2f       	mov	r20, r18
 784:	46 95       	lsr	r20
 786:	46 95       	lsr	r20
 788:	46 95       	lsr	r20
 78a:	d6 01       	movw	r26, r12
 78c:	a4 0f       	add	r26, r20
 78e:	b1 1d       	adc	r27, r1
 790:	42 2f       	mov	r20, r18
 792:	47 70       	andi	r20, 0x07	; 7
 794:	8b 01       	movw	r16, r22
 796:	02 c0       	rjmp	.+4      	; 0x79c <conv_brk+0x15e>
 798:	00 0f       	add	r16, r16
 79a:	11 1f       	adc	r17, r17
 79c:	4a 95       	dec	r20
 79e:	e2 f7       	brpl	.-8      	; 0x798 <conv_brk+0x15a>
 7a0:	a8 01       	movw	r20, r16
 7a2:	5c 91       	ld	r21, X
 7a4:	45 2b       	or	r20, r21
 7a6:	4c 93       	st	X, r20
 7a8:	62 2e       	mov	r6, r18
 7aa:	a4 cf       	rjmp	.-184    	; 0x6f4 <conv_brk+0xb6>
 7ac:	a0 96       	adiw	r28, 0x20	; 32
 7ae:	ef e0       	ldi	r30, 0x0F	; 15
 7b0:	8b c1       	rjmp	.+790    	; 0xac8 <__epilogue_restores__+0x6>

000007b2 <vfscanf>:
 7b2:	a0 e0       	ldi	r26, 0x00	; 0
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	ee ed       	ldi	r30, 0xDE	; 222
 7b8:	f3 e0       	ldi	r31, 0x03	; 3
 7ba:	6d c1       	rjmp	.+730    	; 0xa96 <__prologue_saves__+0x6>
 7bc:	6c 01       	movw	r12, r24
 7be:	eb 01       	movw	r28, r22
 7c0:	5a 01       	movw	r10, r20
 7c2:	fc 01       	movw	r30, r24
 7c4:	16 82       	std	Z+6, r1	; 0x06
 7c6:	17 82       	std	Z+7, r1	; 0x07
 7c8:	51 2c       	mov	r5, r1
 7ca:	f6 01       	movw	r30, r12
 7cc:	e3 80       	ldd	r14, Z+3	; 0x03
 7ce:	fe 01       	movw	r30, r28
 7d0:	e3 fc       	sbrc	r14, 3
 7d2:	85 91       	lpm	r24, Z+
 7d4:	e3 fe       	sbrs	r14, 3
 7d6:	81 91       	ld	r24, Z+
 7d8:	18 2f       	mov	r17, r24
 7da:	ef 01       	movw	r28, r30
 7dc:	88 23       	and	r24, r24
 7de:	09 f4       	brne	.+2      	; 0x7e2 <vfscanf+0x30>
 7e0:	e0 c0       	rjmp	.+448    	; 0x9a2 <vfscanf+0x1f0>
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	e7 d0       	rcall	.+462    	; 0x9b4 <isspace>
 7e6:	89 2b       	or	r24, r25
 7e8:	19 f0       	breq	.+6      	; 0x7f0 <vfscanf+0x3e>
 7ea:	c6 01       	movw	r24, r12
 7ec:	88 de       	rcall	.-752    	; 0x4fe <skip_spaces>
 7ee:	ed cf       	rjmp	.-38     	; 0x7ca <vfscanf+0x18>
 7f0:	15 32       	cpi	r17, 0x25	; 37
 7f2:	41 f4       	brne	.+16     	; 0x804 <vfscanf+0x52>
 7f4:	fe 01       	movw	r30, r28
 7f6:	e3 fc       	sbrc	r14, 3
 7f8:	15 91       	lpm	r17, Z+
 7fa:	e3 fe       	sbrs	r14, 3
 7fc:	11 91       	ld	r17, Z+
 7fe:	ef 01       	movw	r28, r30
 800:	15 32       	cpi	r17, 0x25	; 37
 802:	71 f4       	brne	.+28     	; 0x820 <vfscanf+0x6e>
 804:	c6 01       	movw	r24, r12
 806:	ea d0       	rcall	.+468    	; 0x9dc <fgetc>
 808:	97 fd       	sbrc	r25, 7
 80a:	c9 c0       	rjmp	.+402    	; 0x99e <vfscanf+0x1ec>
 80c:	41 2f       	mov	r20, r17
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	9c 01       	movw	r18, r24
 812:	33 27       	eor	r19, r19
 814:	24 17       	cp	r18, r20
 816:	35 07       	cpc	r19, r21
 818:	c1 f2       	breq	.-80     	; 0x7ca <vfscanf+0x18>
 81a:	b6 01       	movw	r22, r12
 81c:	1d d1       	rcall	.+570    	; 0xa58 <ungetc>
 81e:	c1 c0       	rjmp	.+386    	; 0x9a2 <vfscanf+0x1f0>
 820:	1a 32       	cpi	r17, 0x2A	; 42
 822:	39 f4       	brne	.+14     	; 0x832 <vfscanf+0x80>
 824:	e3 fc       	sbrc	r14, 3
 826:	15 91       	lpm	r17, Z+
 828:	e3 fe       	sbrs	r14, 3
 82a:	11 91       	ld	r17, Z+
 82c:	ef 01       	movw	r28, r30
 82e:	01 e0       	ldi	r16, 0x01	; 1
 830:	01 c0       	rjmp	.+2      	; 0x834 <vfscanf+0x82>
 832:	00 e0       	ldi	r16, 0x00	; 0
 834:	f1 2c       	mov	r15, r1
 836:	20 ed       	ldi	r18, 0xD0	; 208
 838:	21 0f       	add	r18, r17
 83a:	2a 30       	cpi	r18, 0x0A	; 10
 83c:	78 f4       	brcc	.+30     	; 0x85c <vfscanf+0xaa>
 83e:	02 60       	ori	r16, 0x02	; 2
 840:	6f 2d       	mov	r22, r15
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	40 e2       	ldi	r20, 0x20	; 32
 84a:	32 de       	rcall	.-924    	; 0x4b0 <mulacc>
 84c:	f6 2e       	mov	r15, r22
 84e:	fe 01       	movw	r30, r28
 850:	e3 fc       	sbrc	r14, 3
 852:	15 91       	lpm	r17, Z+
 854:	e3 fe       	sbrs	r14, 3
 856:	11 91       	ld	r17, Z+
 858:	ef 01       	movw	r28, r30
 85a:	ed cf       	rjmp	.-38     	; 0x836 <vfscanf+0x84>
 85c:	01 ff       	sbrs	r16, 1
 85e:	03 c0       	rjmp	.+6      	; 0x866 <vfscanf+0xb4>
 860:	f1 10       	cpse	r15, r1
 862:	03 c0       	rjmp	.+6      	; 0x86a <vfscanf+0xb8>
 864:	9e c0       	rjmp	.+316    	; 0x9a2 <vfscanf+0x1f0>
 866:	ff 24       	eor	r15, r15
 868:	fa 94       	dec	r15
 86a:	18 36       	cpi	r17, 0x68	; 104
 86c:	19 f0       	breq	.+6      	; 0x874 <vfscanf+0xc2>
 86e:	1c 36       	cpi	r17, 0x6C	; 108
 870:	51 f0       	breq	.+20     	; 0x886 <vfscanf+0xd4>
 872:	10 c0       	rjmp	.+32     	; 0x894 <vfscanf+0xe2>
 874:	fe 01       	movw	r30, r28
 876:	e3 fc       	sbrc	r14, 3
 878:	15 91       	lpm	r17, Z+
 87a:	e3 fe       	sbrs	r14, 3
 87c:	11 91       	ld	r17, Z+
 87e:	ef 01       	movw	r28, r30
 880:	18 36       	cpi	r17, 0x68	; 104
 882:	41 f4       	brne	.+16     	; 0x894 <vfscanf+0xe2>
 884:	08 60       	ori	r16, 0x08	; 8
 886:	04 60       	ori	r16, 0x04	; 4
 888:	fe 01       	movw	r30, r28
 88a:	e3 fc       	sbrc	r14, 3
 88c:	15 91       	lpm	r17, Z+
 88e:	e3 fe       	sbrs	r14, 3
 890:	11 91       	ld	r17, Z+
 892:	ef 01       	movw	r28, r30
 894:	11 23       	and	r17, r17
 896:	09 f4       	brne	.+2      	; 0x89a <vfscanf+0xe8>
 898:	84 c0       	rjmp	.+264    	; 0x9a2 <vfscanf+0x1f0>
 89a:	61 2f       	mov	r22, r17
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	84 e3       	ldi	r24, 0x34	; 52
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	91 d0       	rcall	.+290    	; 0x9c6 <strchr_P>
 8a4:	89 2b       	or	r24, r25
 8a6:	09 f4       	brne	.+2      	; 0x8aa <vfscanf+0xf8>
 8a8:	7c c0       	rjmp	.+248    	; 0x9a2 <vfscanf+0x1f0>
 8aa:	00 fd       	sbrc	r16, 0
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <vfscanf+0x10a>
 8ae:	f5 01       	movw	r30, r10
 8b0:	80 80       	ld	r8, Z
 8b2:	91 80       	ldd	r9, Z+1	; 0x01
 8b4:	c5 01       	movw	r24, r10
 8b6:	02 96       	adiw	r24, 0x02	; 2
 8b8:	5c 01       	movw	r10, r24
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfscanf+0x10e>
 8bc:	81 2c       	mov	r8, r1
 8be:	91 2c       	mov	r9, r1
 8c0:	1e 36       	cpi	r17, 0x6E	; 110
 8c2:	49 f4       	brne	.+18     	; 0x8d6 <vfscanf+0x124>
 8c4:	f6 01       	movw	r30, r12
 8c6:	46 81       	ldd	r20, Z+6	; 0x06
 8c8:	57 81       	ldd	r21, Z+7	; 0x07
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	20 2f       	mov	r18, r16
 8d0:	c4 01       	movw	r24, r8
 8d2:	e2 dd       	rcall	.-1084   	; 0x498 <putval>
 8d4:	7a cf       	rjmp	.-268    	; 0x7ca <vfscanf+0x18>
 8d6:	13 36       	cpi	r17, 0x63	; 99
 8d8:	a1 f4       	brne	.+40     	; 0x902 <vfscanf+0x150>
 8da:	01 fd       	sbrc	r16, 1
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <vfscanf+0x130>
 8de:	ff 24       	eor	r15, r15
 8e0:	f3 94       	inc	r15
 8e2:	c6 01       	movw	r24, r12
 8e4:	7b d0       	rcall	.+246    	; 0x9dc <fgetc>
 8e6:	97 fd       	sbrc	r25, 7
 8e8:	5a c0       	rjmp	.+180    	; 0x99e <vfscanf+0x1ec>
 8ea:	81 14       	cp	r8, r1
 8ec:	91 04       	cpc	r9, r1
 8ee:	29 f0       	breq	.+10     	; 0x8fa <vfscanf+0x148>
 8f0:	f4 01       	movw	r30, r8
 8f2:	80 83       	st	Z, r24
 8f4:	c4 01       	movw	r24, r8
 8f6:	01 96       	adiw	r24, 0x01	; 1
 8f8:	4c 01       	movw	r8, r24
 8fa:	fa 94       	dec	r15
 8fc:	f1 10       	cpse	r15, r1
 8fe:	f1 cf       	rjmp	.-30     	; 0x8e2 <vfscanf+0x130>
 900:	4a c0       	rjmp	.+148    	; 0x996 <vfscanf+0x1e4>
 902:	1b 35       	cpi	r17, 0x5B	; 91
 904:	51 f4       	brne	.+20     	; 0x91a <vfscanf+0x168>
 906:	9e 01       	movw	r18, r28
 908:	a4 01       	movw	r20, r8
 90a:	6f 2d       	mov	r22, r15
 90c:	c6 01       	movw	r24, r12
 90e:	97 de       	rcall	.-722    	; 0x63e <conv_brk>
 910:	ec 01       	movw	r28, r24
 912:	89 2b       	or	r24, r25
 914:	09 f0       	breq	.+2      	; 0x918 <vfscanf+0x166>
 916:	3f c0       	rjmp	.+126    	; 0x996 <vfscanf+0x1e4>
 918:	39 c0       	rjmp	.+114    	; 0x98c <vfscanf+0x1da>
 91a:	c6 01       	movw	r24, r12
 91c:	f0 dd       	rcall	.-1056   	; 0x4fe <skip_spaces>
 91e:	97 fd       	sbrc	r25, 7
 920:	3e c0       	rjmp	.+124    	; 0x99e <vfscanf+0x1ec>
 922:	1f 36       	cpi	r17, 0x6F	; 111
 924:	49 f1       	breq	.+82     	; 0x978 <vfscanf+0x1c6>
 926:	28 f4       	brcc	.+10     	; 0x932 <vfscanf+0x180>
 928:	14 36       	cpi	r17, 0x64	; 100
 92a:	21 f1       	breq	.+72     	; 0x974 <vfscanf+0x1c2>
 92c:	19 36       	cpi	r17, 0x69	; 105
 92e:	39 f1       	breq	.+78     	; 0x97e <vfscanf+0x1cc>
 930:	25 c0       	rjmp	.+74     	; 0x97c <vfscanf+0x1ca>
 932:	13 37       	cpi	r17, 0x73	; 115
 934:	71 f0       	breq	.+28     	; 0x952 <vfscanf+0x1a0>
 936:	15 37       	cpi	r17, 0x75	; 117
 938:	e9 f0       	breq	.+58     	; 0x974 <vfscanf+0x1c2>
 93a:	20 c0       	rjmp	.+64     	; 0x97c <vfscanf+0x1ca>
 93c:	81 14       	cp	r8, r1
 93e:	91 04       	cpc	r9, r1
 940:	29 f0       	breq	.+10     	; 0x94c <vfscanf+0x19a>
 942:	f4 01       	movw	r30, r8
 944:	60 82       	st	Z, r6
 946:	c4 01       	movw	r24, r8
 948:	01 96       	adiw	r24, 0x01	; 1
 94a:	4c 01       	movw	r8, r24
 94c:	fa 94       	dec	r15
 94e:	ff 20       	and	r15, r15
 950:	59 f0       	breq	.+22     	; 0x968 <vfscanf+0x1b6>
 952:	c6 01       	movw	r24, r12
 954:	43 d0       	rcall	.+134    	; 0x9dc <fgetc>
 956:	3c 01       	movw	r6, r24
 958:	97 fd       	sbrc	r25, 7
 95a:	06 c0       	rjmp	.+12     	; 0x968 <vfscanf+0x1b6>
 95c:	2b d0       	rcall	.+86     	; 0x9b4 <isspace>
 95e:	89 2b       	or	r24, r25
 960:	69 f3       	breq	.-38     	; 0x93c <vfscanf+0x18a>
 962:	b6 01       	movw	r22, r12
 964:	c3 01       	movw	r24, r6
 966:	78 d0       	rcall	.+240    	; 0xa58 <ungetc>
 968:	81 14       	cp	r8, r1
 96a:	91 04       	cpc	r9, r1
 96c:	a1 f0       	breq	.+40     	; 0x996 <vfscanf+0x1e4>
 96e:	f4 01       	movw	r30, r8
 970:	10 82       	st	Z, r1
 972:	11 c0       	rjmp	.+34     	; 0x996 <vfscanf+0x1e4>
 974:	00 62       	ori	r16, 0x20	; 32
 976:	03 c0       	rjmp	.+6      	; 0x97e <vfscanf+0x1cc>
 978:	00 61       	ori	r16, 0x10	; 16
 97a:	01 c0       	rjmp	.+2      	; 0x97e <vfscanf+0x1cc>
 97c:	00 64       	ori	r16, 0x40	; 64
 97e:	20 2f       	mov	r18, r16
 980:	a4 01       	movw	r20, r8
 982:	6f 2d       	mov	r22, r15
 984:	c6 01       	movw	r24, r12
 986:	d1 dd       	rcall	.-1118   	; 0x52a <conv_int>
 988:	81 11       	cpse	r24, r1
 98a:	05 c0       	rjmp	.+10     	; 0x996 <vfscanf+0x1e4>
 98c:	f6 01       	movw	r30, r12
 98e:	83 81       	ldd	r24, Z+3	; 0x03
 990:	80 73       	andi	r24, 0x30	; 48
 992:	29 f4       	brne	.+10     	; 0x99e <vfscanf+0x1ec>
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <vfscanf+0x1f0>
 996:	00 fd       	sbrc	r16, 0
 998:	18 cf       	rjmp	.-464    	; 0x7ca <vfscanf+0x18>
 99a:	53 94       	inc	r5
 99c:	16 cf       	rjmp	.-468    	; 0x7ca <vfscanf+0x18>
 99e:	55 20       	and	r5, r5
 9a0:	19 f0       	breq	.+6      	; 0x9a8 <vfscanf+0x1f6>
 9a2:	85 2d       	mov	r24, r5
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <vfscanf+0x1fa>
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	9f ef       	ldi	r25, 0xFF	; 255
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	ef e0       	ldi	r30, 0x0F	; 15
 9b2:	8a c0       	rjmp	.+276    	; 0xac8 <__epilogue_restores__+0x6>

000009b4 <isspace>:
 9b4:	91 11       	cpse	r25, r1
 9b6:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__ctype_isfalse>
 9ba:	80 32       	cpi	r24, 0x20	; 32
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <isspace+0x10>
 9be:	89 50       	subi	r24, 0x09	; 9
 9c0:	85 50       	subi	r24, 0x05	; 5
 9c2:	c8 f7       	brcc	.-14     	; 0x9b6 <isspace+0x2>
 9c4:	08 95       	ret

000009c6 <strchr_P>:
 9c6:	fc 01       	movw	r30, r24
 9c8:	05 90       	lpm	r0, Z+
 9ca:	06 16       	cp	r0, r22
 9cc:	21 f0       	breq	.+8      	; 0x9d6 <strchr_P+0x10>
 9ce:	00 20       	and	r0, r0
 9d0:	d9 f7       	brne	.-10     	; 0x9c8 <strchr_P+0x2>
 9d2:	c0 01       	movw	r24, r0
 9d4:	08 95       	ret
 9d6:	31 97       	sbiw	r30, 0x01	; 1
 9d8:	cf 01       	movw	r24, r30
 9da:	08 95       	ret

000009dc <fgetc>:
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	ec 01       	movw	r28, r24
 9e2:	2b 81       	ldd	r18, Y+3	; 0x03
 9e4:	20 ff       	sbrs	r18, 0
 9e6:	33 c0       	rjmp	.+102    	; 0xa4e <fgetc+0x72>
 9e8:	26 ff       	sbrs	r18, 6
 9ea:	0a c0       	rjmp	.+20     	; 0xa00 <fgetc+0x24>
 9ec:	2f 7b       	andi	r18, 0xBF	; 191
 9ee:	2b 83       	std	Y+3, r18	; 0x03
 9f0:	8e 81       	ldd	r24, Y+6	; 0x06
 9f2:	9f 81       	ldd	r25, Y+7	; 0x07
 9f4:	01 96       	adiw	r24, 0x01	; 1
 9f6:	8e 83       	std	Y+6, r24	; 0x06
 9f8:	9f 83       	std	Y+7, r25	; 0x07
 9fa:	8a 81       	ldd	r24, Y+2	; 0x02
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	29 c0       	rjmp	.+82     	; 0xa52 <fgetc+0x76>
 a00:	22 ff       	sbrs	r18, 2
 a02:	0f c0       	rjmp	.+30     	; 0xa22 <fgetc+0x46>
 a04:	e8 81       	ld	r30, Y
 a06:	f9 81       	ldd	r31, Y+1	; 0x01
 a08:	80 81       	ld	r24, Z
 a0a:	08 2e       	mov	r0, r24
 a0c:	00 0c       	add	r0, r0
 a0e:	99 0b       	sbc	r25, r25
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	19 f4       	brne	.+6      	; 0xa1a <fgetc+0x3e>
 a14:	20 62       	ori	r18, 0x20	; 32
 a16:	2b 83       	std	Y+3, r18	; 0x03
 a18:	1a c0       	rjmp	.+52     	; 0xa4e <fgetc+0x72>
 a1a:	31 96       	adiw	r30, 0x01	; 1
 a1c:	e8 83       	st	Y, r30
 a1e:	f9 83       	std	Y+1, r31	; 0x01
 a20:	0e c0       	rjmp	.+28     	; 0xa3e <fgetc+0x62>
 a22:	ea 85       	ldd	r30, Y+10	; 0x0a
 a24:	fb 85       	ldd	r31, Y+11	; 0x0b
 a26:	09 95       	icall
 a28:	97 ff       	sbrs	r25, 7
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <fgetc+0x62>
 a2c:	2b 81       	ldd	r18, Y+3	; 0x03
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	11 f0       	breq	.+4      	; 0xa36 <fgetc+0x5a>
 a32:	80 e2       	ldi	r24, 0x20	; 32
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <fgetc+0x5c>
 a36:	80 e1       	ldi	r24, 0x10	; 16
 a38:	82 2b       	or	r24, r18
 a3a:	8b 83       	std	Y+3, r24	; 0x03
 a3c:	08 c0       	rjmp	.+16     	; 0xa4e <fgetc+0x72>
 a3e:	2e 81       	ldd	r18, Y+6	; 0x06
 a40:	3f 81       	ldd	r19, Y+7	; 0x07
 a42:	2f 5f       	subi	r18, 0xFF	; 255
 a44:	3f 4f       	sbci	r19, 0xFF	; 255
 a46:	2e 83       	std	Y+6, r18	; 0x06
 a48:	3f 83       	std	Y+7, r19	; 0x07
 a4a:	99 27       	eor	r25, r25
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <fgetc+0x76>
 a4e:	8f ef       	ldi	r24, 0xFF	; 255
 a50:	9f ef       	ldi	r25, 0xFF	; 255
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	08 95       	ret

00000a58 <ungetc>:
 a58:	fb 01       	movw	r30, r22
 a5a:	23 81       	ldd	r18, Z+3	; 0x03
 a5c:	20 ff       	sbrs	r18, 0
 a5e:	12 c0       	rjmp	.+36     	; 0xa84 <ungetc+0x2c>
 a60:	26 fd       	sbrc	r18, 6
 a62:	10 c0       	rjmp	.+32     	; 0xa84 <ungetc+0x2c>
 a64:	8f 3f       	cpi	r24, 0xFF	; 255
 a66:	3f ef       	ldi	r19, 0xFF	; 255
 a68:	93 07       	cpc	r25, r19
 a6a:	61 f0       	breq	.+24     	; 0xa84 <ungetc+0x2c>
 a6c:	82 83       	std	Z+2, r24	; 0x02
 a6e:	2f 7d       	andi	r18, 0xDF	; 223
 a70:	20 64       	ori	r18, 0x40	; 64
 a72:	23 83       	std	Z+3, r18	; 0x03
 a74:	26 81       	ldd	r18, Z+6	; 0x06
 a76:	37 81       	ldd	r19, Z+7	; 0x07
 a78:	21 50       	subi	r18, 0x01	; 1
 a7a:	31 09       	sbc	r19, r1
 a7c:	26 83       	std	Z+6, r18	; 0x06
 a7e:	37 83       	std	Z+7, r19	; 0x07
 a80:	99 27       	eor	r25, r25
 a82:	08 95       	ret
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__ctype_isfalse>:
 a8a:	99 27       	eor	r25, r25
 a8c:	88 27       	eor	r24, r24

00000a8e <__ctype_istrue>:
 a8e:	08 95       	ret

00000a90 <__prologue_saves__>:
 a90:	2f 92       	push	r2
 a92:	3f 92       	push	r3
 a94:	4f 92       	push	r4
 a96:	5f 92       	push	r5
 a98:	6f 92       	push	r6
 a9a:	7f 92       	push	r7
 a9c:	8f 92       	push	r8
 a9e:	9f 92       	push	r9
 aa0:	af 92       	push	r10
 aa2:	bf 92       	push	r11
 aa4:	cf 92       	push	r12
 aa6:	df 92       	push	r13
 aa8:	ef 92       	push	r14
 aaa:	ff 92       	push	r15
 aac:	0f 93       	push	r16
 aae:	1f 93       	push	r17
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
 ab8:	ca 1b       	sub	r28, r26
 aba:	db 0b       	sbc	r29, r27
 abc:	cd bf       	out	0x3d, r28	; 61
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	09 94       	ijmp

00000ac2 <__epilogue_restores__>:
 ac2:	2a 88       	ldd	r2, Y+18	; 0x12
 ac4:	39 88       	ldd	r3, Y+17	; 0x11
 ac6:	48 88       	ldd	r4, Y+16	; 0x10
 ac8:	5f 84       	ldd	r5, Y+15	; 0x0f
 aca:	6e 84       	ldd	r6, Y+14	; 0x0e
 acc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ace:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad4:	b9 84       	ldd	r11, Y+9	; 0x09
 ad6:	c8 84       	ldd	r12, Y+8	; 0x08
 ad8:	df 80       	ldd	r13, Y+7	; 0x07
 ada:	ee 80       	ldd	r14, Y+6	; 0x06
 adc:	fd 80       	ldd	r15, Y+5	; 0x05
 ade:	0c 81       	ldd	r16, Y+4	; 0x04
 ae0:	1b 81       	ldd	r17, Y+3	; 0x03
 ae2:	aa 81       	ldd	r26, Y+2	; 0x02
 ae4:	b9 81       	ldd	r27, Y+1	; 0x01
 ae6:	ce 0f       	add	r28, r30
 ae8:	d1 1d       	adc	r29, r1
 aea:	cd bf       	out	0x3d, r28	; 61
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	ed 01       	movw	r28, r26
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
