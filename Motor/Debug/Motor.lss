
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00803e00  00803e00  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026b8  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a2b  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000476  00000000  00000000  000043e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  0000485c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010db  00000000  00000000  00004974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  00005a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00005d1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	95 c0       	rjmp	.+298    	; 0x132 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	45 c0       	rjmp	.+138    	; 0xa6 <__vector_13>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 30       	cpi	r26, 0x08	; 8
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	9e d0       	rcall	.+316    	; 0x18e <main>
  52:	b8 c0       	rjmp	.+368    	; 0x1c4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <timerAInit>:
			TCA0.SPLIT.LCMP2 = speed;
			TCA0.SPLIT.HCMP0 = 0;
		}
		else{
			TCA0.SPLIT.LCMP2 = 0;
			TCA0.SPLIT.HCMP0 = 255-speed;
  56:	e0 e0       	ldi	r30, 0x00	; 0
  58:	f2 e0       	ldi	r31, 0x02	; 2
  5a:	82 81       	ldd	r24, Z+2	; 0x02
  5c:	8f 60       	ori	r24, 0x0F	; 15
  5e:	82 83       	std	Z+2, r24	; 0x02
  60:	e0 e0       	ldi	r30, 0x00	; 0
  62:	fa e0       	ldi	r31, 0x0A	; 10
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	86 a3       	std	Z+38, r24	; 0x26
  68:	87 a3       	std	Z+39, r24	; 0x27
  6a:	83 81       	ldd	r24, Z+3	; 0x03
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	83 83       	std	Z+3, r24	; 0x03
  70:	81 81       	ldd	r24, Z+1	; 0x01
  72:	87 61       	ori	r24, 0x17	; 23
  74:	81 83       	std	Z+1, r24	; 0x01
  76:	80 81       	ld	r24, Z
  78:	87 60       	ori	r24, 0x07	; 7
  7a:	80 83       	st	Z, r24
  7c:	08 95       	ret

0000007e <timerBInit>:
  7e:	e0 e4       	ldi	r30, 0x40	; 64
  80:	fa e0       	ldi	r31, 0x0A	; 10
  82:	8b ec       	ldi	r24, 0xCB	; 203
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	84 87       	std	Z+12, r24	; 0x0c
  88:	95 87       	std	Z+13, r25	; 0x0d
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	85 83       	std	Z+5, r24	; 0x05
  8e:	80 83       	st	Z, r24
  90:	08 95       	ret

00000092 <clkInit>:
  92:	88 ed       	ldi	r24, 0xD8	; 216
  94:	84 bf       	out	0x34, r24	; 52
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	91 83       	std	Z+1, r25	; 0x01
  9e:	84 bf       	out	0x34, r24	; 52
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 8b       	std	Z+16, r24	; 0x10
  a4:	08 95       	ret

000000a6 <__vector_13>:
		}
	}
}
ISR(TCB0_INT_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	timeA2 ++;
  bc:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
  c0:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
  c4:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
  c8:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	a1 1d       	adc	r26, r1
  d0:	b1 1d       	adc	r27, r1
  d2:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
  d6:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
  da:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
  de:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
	timeA1 ++;
  e2:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <timeA1>
  e6:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <timeA1+0x1>
  ea:	a0 91 06 3e 	lds	r26, 0x3E06	; 0x803e06 <timeA1+0x2>
  ee:	b0 91 07 3e 	lds	r27, 0x3E07	; 0x803e07 <timeA1+0x3>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	a1 1d       	adc	r26, r1
  f6:	b1 1d       	adc	r27, r1
  f8:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <timeA1>
  fc:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <timeA1+0x1>
 100:	a0 93 06 3e 	sts	0x3E06, r26	; 0x803e06 <timeA1+0x2>
 104:	b0 93 07 3e 	sts	0x3E07, r27	; 0x803e07 <timeA1+0x3>
	PORTB.OUTTGL |= 0x08;
 108:	e0 e2       	ldi	r30, 0x20	; 32
 10a:	f4 e0       	ldi	r31, 0x04	; 4
 10c:	87 81       	ldd	r24, Z+7	; 0x07
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	87 83       	std	Z+7, r24	; 0x07
	TCB0_INTFLAGS |= TCB_CAPT_bm;
 112:	e6 e4       	ldi	r30, 0x46	; 70
 114:	fa e0       	ldi	r31, 0x0A	; 10
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_3>:

ISR(PORTA_PORT_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	/* Insert your PORTA interrupt handling code here */
	if(PORTA.INTFLAGS & 0x04){
 13e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
 142:	82 ff       	sbrs	r24, 2
 144:	0c c0       	rjmp	.+24     	; 0x15e <__vector_3+0x2c>
		if(PORTA.IN & 0x04){
 146:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 14a:	82 ff       	sbrs	r24, 2
 14c:	08 c0       	rjmp	.+16     	; 0x15e <__vector_3+0x2c>
			timeA2 = 0;
 14e:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
 152:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 156:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 15a:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
		}
		else{
			//setMotor(0,map(timeA2, 0, 101, -255, 255));
		}
	}
	if(PORTA.INTFLAGS & 0x02){
 15e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
 162:	81 ff       	sbrs	r24, 1
 164:	0c c0       	rjmp	.+24     	; 0x17e <__vector_3+0x4c>
		if(PORTA.IN & 0x02){
 166:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 16a:	81 ff       	sbrs	r24, 1
 16c:	08 c0       	rjmp	.+16     	; 0x17e <__vector_3+0x4c>
			timeA2 = 0;
 16e:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
 172:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 176:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 17a:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
		else{
			//setMotor(1,map(timeA2, 0, 101, -255, 255));
		}
	}
	
	VPORTA_INTFLAGS = (1 << 1);
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	83 b9       	out	0x03, r24	; 3
}
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:
int main(void)
{
	PORTA.DIR &= 0x00;
 18e:	e0 e0       	ldi	r30, 0x00	; 0
 190:	f4 e0       	ldi	r31, 0x04	; 4
 192:	80 81       	ld	r24, Z
 194:	10 82       	st	Z, r1
	PORTA.PIN1CTRL |= 0x01;
 196:	81 89       	ldd	r24, Z+17	; 0x11
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	81 8b       	std	Z+17, r24	; 0x11
	//PORTA.PIN2CTRL |= 0x01;
	
	PORTB.DIR |= 0x38;
 19c:	e0 e2       	ldi	r30, 0x20	; 32
 19e:	f4 e0       	ldi	r31, 0x04	; 4
 1a0:	80 81       	ld	r24, Z
 1a2:	88 63       	ori	r24, 0x38	; 56
 1a4:	80 83       	st	Z, r24
	PORTC.DIR |= 0x08;
 1a6:	e0 e4       	ldi	r30, 0x40	; 64
 1a8:	f4 e0       	ldi	r31, 0x04	; 4
 1aa:	80 81       	ld	r24, Z
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	80 83       	st	Z, r24
	clkInit();
 1b0:	70 df       	rcall	.-288    	; 0x92 <clkInit>
	timerBInit();
 1b2:	65 df       	rcall	.-310    	; 0x7e <timerBInit>
	timerAInit();
 1b4:	50 df       	rcall	.-352    	; 0x56 <timerAInit>
	sei();
 1b6:	78 94       	sei
	while (1)
	{
		PORTB.OUTTGL |= 0x08;
 1b8:	e0 e2       	ldi	r30, 0x20	; 32
 1ba:	f4 e0       	ldi	r31, 0x04	; 4
 1bc:	87 81       	ldd	r24, Z+7	; 0x07
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	87 83       	std	Z+7, r24	; 0x07
 1c2:	fa cf       	rjmp	.-12     	; 0x1b8 <main+0x2a>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
