
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803e00  000005ca  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803e08  00803e08  00000666  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000284c  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a7a  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000526  00000000  00000000  000049fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00004f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010f9  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042c  00000000  00000000  00006185  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000065b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	82 c1       	rjmp	.+772    	; 0x30c <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	33 c1       	rjmp	.+614    	; 0x282 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	ea ec       	ldi	r30, 0xCA	; 202
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 30       	cpi	r26, 0x0E	; 14
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	d0 d1       	rcall	.+928    	; 0x408 <main>
  68:	ae c2       	rjmp	.+1372   	; 0x5c6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <map>:
int counterUsed = 0;

uint32_t timeA1 =15278;
uint32_t timeA2 =15278;
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  6c:	4f 92       	push	r4
  6e:	5f 92       	push	r5
  70:	6f 92       	push	r6
  72:	7f 92       	push	r7
  74:	af 92       	push	r10
  76:	bf 92       	push	r11
  78:	cf 92       	push	r12
  7a:	df 92       	push	r13
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	29 01       	movw	r4, r18
  8e:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  90:	9b 01       	movw	r18, r22
  92:	ac 01       	movw	r20, r24
  94:	24 19       	sub	r18, r4
  96:	35 09       	sbc	r19, r5
  98:	46 09       	sbc	r20, r6
  9a:	57 09       	sbc	r21, r7
  9c:	89 89       	ldd	r24, Y+17	; 0x11
  9e:	9a 89       	ldd	r25, Y+18	; 0x12
  a0:	ab 89       	ldd	r26, Y+19	; 0x13
  a2:	bc 89       	ldd	r27, Y+20	; 0x14
  a4:	bc 01       	movw	r22, r24
  a6:	cd 01       	movw	r24, r26
  a8:	6a 19       	sub	r22, r10
  aa:	7b 09       	sbc	r23, r11
  ac:	8c 09       	sbc	r24, r12
  ae:	9d 09       	sbc	r25, r13
  b0:	27 d2       	rcall	.+1102   	; 0x500 <__mulsi3>
  b2:	a8 01       	movw	r20, r16
  b4:	97 01       	movw	r18, r14
  b6:	24 19       	sub	r18, r4
  b8:	35 09       	sbc	r19, r5
  ba:	46 09       	sbc	r20, r6
  bc:	57 09       	sbc	r21, r7
  be:	2f d2       	rcall	.+1118   	; 0x51e <__divmodsi4>
  c0:	c6 01       	movw	r24, r12
  c2:	b5 01       	movw	r22, r10
  c4:	62 0f       	add	r22, r18
  c6:	73 1f       	adc	r23, r19
  c8:	84 1f       	adc	r24, r20
  ca:	95 1f       	adc	r25, r21
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	cf 90       	pop	r12
  dc:	bf 90       	pop	r11
  de:	af 90       	pop	r10
  e0:	7f 90       	pop	r7
  e2:	6f 90       	pop	r6
  e4:	5f 90       	pop	r5
  e6:	4f 90       	pop	r4
  e8:	08 95       	ret

000000ea <Clamp>:
int Clamp( int value, int min, int max )
{
	return (value < min) ? min : (value > max) ? max : value;
  ea:	86 17       	cp	r24, r22
  ec:	97 07       	cpc	r25, r23
  ee:	2c f0       	brlt	.+10     	; 0xfa <Clamp+0x10>
  f0:	48 17       	cp	r20, r24
  f2:	59 07       	cpc	r21, r25
  f4:	1c f4       	brge	.+6      	; 0xfc <Clamp+0x12>
  f6:	ca 01       	movw	r24, r20
  f8:	08 95       	ret
  fa:	cb 01       	movw	r24, r22
}
  fc:	08 95       	ret

000000fe <timerAInit>:
void timerAInit(void)
{
	PORTMUX.CTRLC |= 0x0F;
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f2 e0       	ldi	r31, 0x02	; 2
 102:	82 81       	ldd	r24, Z+2	; 0x02
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	82 83       	std	Z+2, r24	; 0x02
	
	TCA0.SPLIT.LPER = 255;
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	fa e0       	ldi	r31, 0x0A	; 10
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	86 a3       	std	Z+38, r24	; 0x26
	TCA0.SPLIT.HPER = 255;
 110:	87 a3       	std	Z+39, r24	; 0x27

	TCA0.SPLIT.CTRLD |= (TCA_SPLIT_SPLITM_bm);
 112:	83 81       	ldd	r24, Z+3	; 0x03
 114:	81 60       	ori	r24, 0x01	; 1
 116:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB |= 0x17;
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	87 61       	ori	r24, 0x17	; 23
 11c:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.CTRLA |= (TCA_SPLIT_CLKSEL_DIV8_gc) | (TCA_SPLIT_ENABLE_bm);
 11e:	80 81       	ld	r24, Z
 120:	87 60       	ori	r24, 0x07	; 7
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <timerBInit>:
}
void timerBInit(void)
{
	TCB0.CCMP = 0xFFFF;
 126:	e0 e4       	ldi	r30, 0x40	; 64
 128:	fa e0       	ldi	r31, 0x0A	; 10
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	84 87       	std	Z+12, r24	; 0x0c
 130:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.INTCTRL = 1 << TCB_CAPT_bp;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	85 83       	std	Z+5, r24	; 0x05

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | 1 << TCB_ENABLE_bp;
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <clkInit>:
}
void clkInit(void){
	CPU_CCP = 0xD8;
 13a:	88 ed       	ldi	r24, 0xD8	; 216
 13c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0x01;
 13e:	e0 e6       	ldi	r30, 0x60	; 96
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	91 83       	std	Z+1, r25	; 0x01
	CPU_CCP = 0xD8;
 146:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCTRLA = 0x02;
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 8b       	std	Z+16, r24	; 0x10
 14c:	08 95       	ret

0000014e <setMotor>:
}
void setMotor(int m, long speed){
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
	if(m == 0){
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	09 f0       	breq	.+2      	; 0x158 <setMotor+0xa>
 156:	49 c0       	rjmp	.+146    	; 0x1ea <setMotor+0x9c>
		if((~PORTA.IN & 0x20) && (speed > 10)){
 158:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 15c:	25 fd       	sbrc	r18, 5
 15e:	05 c0       	rjmp	.+10     	; 0x16a <setMotor+0x1c>
 160:	4b 30       	cpi	r20, 0x0B	; 11
 162:	51 05       	cpc	r21, r1
 164:	61 05       	cpc	r22, r1
 166:	71 05       	cpc	r23, r1
 168:	5c f4       	brge	.+22     	; 0x180 <setMotor+0x32>
			speed = 300;
		}
		else if((~PORTA.IN & 0x10) && (speed < -10)){
 16a:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 16e:	24 fd       	sbrc	r18, 4
 170:	10 c0       	rjmp	.+32     	; 0x192 <setMotor+0x44>
 172:	46 3f       	cpi	r20, 0xF6	; 246
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	52 07       	cpc	r21, r18
 178:	62 07       	cpc	r22, r18
 17a:	72 07       	cpc	r23, r18
 17c:	34 f0       	brlt	.+12     	; 0x18a <setMotor+0x3c>
 17e:	09 c0       	rjmp	.+18     	; 0x192 <setMotor+0x44>
	CLKCTRL.OSC20MCTRLA = 0x02;
}
void setMotor(int m, long speed){
	if(m == 0){
		if((~PORTA.IN & 0x20) && (speed > 10)){
			speed = 300;
 180:	4c e2       	ldi	r20, 0x2C	; 44
 182:	51 e0       	ldi	r21, 0x01	; 1
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	04 c0       	rjmp	.+8      	; 0x192 <setMotor+0x44>
		}
		else if((~PORTA.IN & 0x10) && (speed < -10)){
			speed = 300;
 18a:	4c e2       	ldi	r20, 0x2C	; 44
 18c:	51 e0       	ldi	r21, 0x01	; 1
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	70 e0       	ldi	r23, 0x00	; 0
		}
		
		if(speed <= 10 && speed >= -10){
 192:	8a 01       	movw	r16, r20
 194:	9b 01       	movw	r18, r22
 196:	06 5f       	subi	r16, 0xF6	; 246
 198:	1f 4f       	sbci	r17, 0xFF	; 255
 19a:	2f 4f       	sbci	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	05 31       	cpi	r16, 0x15	; 21
 1a0:	11 05       	cpc	r17, r1
 1a2:	21 05       	cpc	r18, r1
 1a4:	31 05       	cpc	r19, r1
 1a6:	28 f4       	brcc	.+10     	; 0x1b2 <setMotor+0x64>
			TCA0.SPLIT.LCMP0 = 0;
 1a8:	e0 e0       	ldi	r30, 0x00	; 0
 1aa:	fa e0       	ldi	r31, 0x0A	; 10
 1ac:	10 a6       	std	Z+40, r1	; 0x28
			TCA0.SPLIT.LCMP1 = 0;
 1ae:	12 a6       	std	Z+42, r1	; 0x2a
 1b0:	1c c0       	rjmp	.+56     	; 0x1ea <setMotor+0x9c>
		}
		else if (speed == 300)
 1b2:	4c 32       	cpi	r20, 0x2C	; 44
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	52 07       	cpc	r21, r18
 1b8:	61 05       	cpc	r22, r1
 1ba:	71 05       	cpc	r23, r1
 1bc:	31 f4       	brne	.+12     	; 0x1ca <setMotor+0x7c>
		{
			TCA0.SPLIT.LCMP0 = 255;
 1be:	e0 e0       	ldi	r30, 0x00	; 0
 1c0:	fa e0       	ldi	r31, 0x0A	; 10
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	20 a7       	std	Z+40, r18	; 0x28
			TCA0.SPLIT.LCMP1 = 255;
 1c6:	22 a7       	std	Z+42, r18	; 0x2a
 1c8:	10 c0       	rjmp	.+32     	; 0x1ea <setMotor+0x9c>
		}
		else if(speed > 0){
 1ca:	14 16       	cp	r1, r20
 1cc:	15 06       	cpc	r1, r21
 1ce:	16 06       	cpc	r1, r22
 1d0:	17 06       	cpc	r1, r23
 1d2:	2c f4       	brge	.+10     	; 0x1de <setMotor+0x90>
			TCA0.SPLIT.LCMP0 = speed;
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	fa e0       	ldi	r31, 0x0A	; 10
 1d8:	40 a7       	std	Z+40, r20	; 0x28
			TCA0.SPLIT.LCMP1 = 0;
 1da:	12 a6       	std	Z+42, r1	; 0x2a
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <setMotor+0x9c>
		}
		else{
			TCA0.SPLIT.LCMP0 = 0;
 1de:	e0 e0       	ldi	r30, 0x00	; 0
 1e0:	fa e0       	ldi	r31, 0x0A	; 10
 1e2:	10 a6       	std	Z+40, r1	; 0x28
			TCA0.SPLIT.LCMP1 = 255-speed;
 1e4:	24 2f       	mov	r18, r20
 1e6:	20 95       	com	r18
 1e8:	22 a7       	std	Z+42, r18	; 0x2a
		}
	}
	if(m == 1){
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <setMotor+0xa2>
 1ee:	46 c0       	rjmp	.+140    	; 0x27c <__DATA_REGION_LENGTH__+0x7c>

		if((~PORTA.IN & 0x40) && (speed > 10)){
 1f0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 1f4:	86 fd       	sbrc	r24, 6
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <__DATA_REGION_LENGTH__+0x2>
 1f8:	4b 30       	cpi	r20, 0x0B	; 11
 1fa:	51 05       	cpc	r21, r1
 1fc:	61 05       	cpc	r22, r1
 1fe:	71 05       	cpc	r23, r1
 200:	5c f4       	brge	.+22     	; 0x218 <__DATA_REGION_LENGTH__+0x18>
			speed = 300;
		}
		else if((~PORTA.IN & 0x80) && (speed < -10)){
 202:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 206:	88 23       	and	r24, r24
 208:	84 f0       	brlt	.+32     	; 0x22a <__DATA_REGION_LENGTH__+0x2a>
 20a:	46 3f       	cpi	r20, 0xF6	; 246
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	58 07       	cpc	r21, r24
 210:	68 07       	cpc	r22, r24
 212:	78 07       	cpc	r23, r24
 214:	34 f0       	brlt	.+12     	; 0x222 <__DATA_REGION_LENGTH__+0x22>
 216:	09 c0       	rjmp	.+18     	; 0x22a <__DATA_REGION_LENGTH__+0x2a>
		}
	}
	if(m == 1){

		if((~PORTA.IN & 0x40) && (speed > 10)){
			speed = 300;
 218:	4c e2       	ldi	r20, 0x2C	; 44
 21a:	51 e0       	ldi	r21, 0x01	; 1
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	04 c0       	rjmp	.+8      	; 0x22a <__DATA_REGION_LENGTH__+0x2a>
		}
		else if((~PORTA.IN & 0x80) && (speed < -10)){
			speed = 300;
 222:	4c e2       	ldi	r20, 0x2C	; 44
 224:	51 e0       	ldi	r21, 0x01	; 1
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
		}
		
		if(speed <= 10 && speed >= -10){
 22a:	db 01       	movw	r26, r22
 22c:	ca 01       	movw	r24, r20
 22e:	0a 96       	adiw	r24, 0x0a	; 10
 230:	a1 1d       	adc	r26, r1
 232:	b1 1d       	adc	r27, r1
 234:	45 97       	sbiw	r24, 0x15	; 21
 236:	a1 05       	cpc	r26, r1
 238:	b1 05       	cpc	r27, r1
 23a:	28 f4       	brcc	.+10     	; 0x246 <__DATA_REGION_LENGTH__+0x46>
			TCA0.SPLIT.LCMP2 = 0;
 23c:	e0 e0       	ldi	r30, 0x00	; 0
 23e:	fa e0       	ldi	r31, 0x0A	; 10
 240:	14 a6       	std	Z+44, r1	; 0x2c
			TCA0.SPLIT.HCMP0 = 0;
 242:	11 a6       	std	Z+41, r1	; 0x29
 244:	1b c0       	rjmp	.+54     	; 0x27c <__DATA_REGION_LENGTH__+0x7c>
		}
		else if (speed == 300)
 246:	4c 32       	cpi	r20, 0x2C	; 44
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	52 07       	cpc	r21, r18
 24c:	61 05       	cpc	r22, r1
 24e:	71 05       	cpc	r23, r1
 250:	31 f4       	brne	.+12     	; 0x25e <__DATA_REGION_LENGTH__+0x5e>
		{
			TCA0.SPLIT.LCMP2 = 255;
 252:	e0 e0       	ldi	r30, 0x00	; 0
 254:	fa e0       	ldi	r31, 0x0A	; 10
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	84 a7       	std	Z+44, r24	; 0x2c
			TCA0.SPLIT.HCMP0 = 255;
 25a:	81 a7       	std	Z+41, r24	; 0x29
 25c:	0f c0       	rjmp	.+30     	; 0x27c <__DATA_REGION_LENGTH__+0x7c>
		}
		else if(speed > 0){
 25e:	14 16       	cp	r1, r20
 260:	15 06       	cpc	r1, r21
 262:	16 06       	cpc	r1, r22
 264:	17 06       	cpc	r1, r23
 266:	2c f4       	brge	.+10     	; 0x272 <__DATA_REGION_LENGTH__+0x72>
			TCA0.SPLIT.LCMP2 = speed;
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	fa e0       	ldi	r31, 0x0A	; 10
 26c:	44 a7       	std	Z+44, r20	; 0x2c
			TCA0.SPLIT.HCMP0 = 0;
 26e:	11 a6       	std	Z+41, r1	; 0x29
 270:	05 c0       	rjmp	.+10     	; 0x27c <__DATA_REGION_LENGTH__+0x7c>
		}
		else{
			TCA0.SPLIT.LCMP2 = 0;
 272:	e0 e0       	ldi	r30, 0x00	; 0
 274:	fa e0       	ldi	r31, 0x0A	; 10
 276:	14 a6       	std	Z+44, r1	; 0x2c
			TCA0.SPLIT.HCMP0 = 255-speed;
 278:	40 95       	com	r20
 27a:	41 a7       	std	Z+41, r20	; 0x29
		}
	}
}
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <__vector_13>:
ISR(TCB0_INT_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	if(counterUsed == 1){
 298:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
 29c:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	91 05       	cpc	r25, r1
 2a4:	89 f4       	brne	.+34     	; 0x2c8 <__vector_13+0x46>
		counterUsed = 0;
 2a6:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <__data_end>
 2aa:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <__data_end+0x1>
		timeA1 = 15278;
 2ae:	8e ea       	ldi	r24, 0xAE	; 174
 2b0:	9b e3       	ldi	r25, 0x3B	; 59
 2b2:	a0 e0       	ldi	r26, 0x00	; 0
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <timeA1>
 2ba:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <timeA1+0x1>
 2be:	a0 93 06 3e 	sts	0x3E06, r26	; 0x803e06 <timeA1+0x2>
 2c2:	b0 93 07 3e 	sts	0x3E07, r27	; 0x803e07 <timeA1+0x3>
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <__vector_13+0x6a>
	}
	else if(counterUsed == 2){
 2c8:	02 97       	sbiw	r24, 0x02	; 2
 2ca:	81 f4       	brne	.+32     	; 0x2ec <__vector_13+0x6a>
		counterUsed = 0;
 2cc:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <__data_end>
 2d0:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <__data_end+0x1>
		timeA2 = 15278;
 2d4:	8e ea       	ldi	r24, 0xAE	; 174
 2d6:	9b e3       	ldi	r25, 0x3B	; 59
 2d8:	a0 e0       	ldi	r26, 0x00	; 0
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
 2e0:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 2e4:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 2e8:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
	}
	
	TCB0_INTFLAGS |= TCB_CAPT_bm;
 2ec:	e6 e4       	ldi	r30, 0x46	; 70
 2ee:	fa e0       	ldi	r31, 0x0A	; 10
 2f0:	80 81       	ld	r24, Z
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	80 83       	st	Z, r24
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_3>:

ISR(PORTA_PORT_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	/* Insert your PORTA interrupt handling code here */
	if(PORTA.INTFLAGS & 0x02){
 322:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
 326:	81 ff       	sbrs	r24, 1
 328:	30 c0       	rjmp	.+96     	; 0x38a <__vector_3+0x7e>
		PORTA.INTFLAGS = 0x02;
 32a:	e0 e0       	ldi	r30, 0x00	; 0
 32c:	f4 e0       	ldi	r31, 0x04	; 4
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	81 87       	std	Z+9, r24	; 0x09
		if(PORTA.IN & 0x02){
 332:	80 85       	ldd	r24, Z+8	; 0x08
 334:	81 ff       	sbrs	r24, 1
 336:	11 c0       	rjmp	.+34     	; 0x35a <__vector_3+0x4e>
			if(counterUsed == 0){
 338:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
 33c:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
 340:	89 2b       	or	r24, r25
 342:	19 f5       	brne	.+70     	; 0x38a <__vector_3+0x7e>
				TCB0.CNT = 0;
 344:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__RODATA_PM_OFFSET__+0x7f8a4a>
 348:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__RODATA_PM_OFFSET__+0x7f8a4b>
				counterUsed = 1;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <__data_end>
 354:	90 93 09 3e 	sts	0x3E09, r25	; 0x803e09 <__data_end+0x1>
 358:	18 c0       	rjmp	.+48     	; 0x38a <__vector_3+0x7e>
			}
		}
		else{
			if(counterUsed == 1){
 35a:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
 35e:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	91 f4       	brne	.+36     	; 0x38a <__vector_3+0x7e>
				counterUsed = 0;
 366:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <__data_end>
 36a:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <__data_end+0x1>
				timeA1 = TCB0.CNT;
 36e:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <__RODATA_PM_OFFSET__+0x7f8a4a>
 372:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <__RODATA_PM_OFFSET__+0x7f8a4b>
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <timeA1>
 37e:	90 93 05 3e 	sts	0x3E05, r25	; 0x803e05 <timeA1+0x1>
 382:	a0 93 06 3e 	sts	0x3E06, r26	; 0x803e06 <timeA1+0x2>
 386:	b0 93 07 3e 	sts	0x3E07, r27	; 0x803e07 <timeA1+0x3>
			}
		}
	}
	
	if(PORTA.INTFLAGS & 0x04){
 38a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__RODATA_PM_OFFSET__+0x7f8409>
 38e:	82 ff       	sbrs	r24, 2
 390:	30 c0       	rjmp	.+96     	; 0x3f2 <__vector_3+0xe6>
		PORTA.INTFLAGS = 0x04;
 392:	e0 e0       	ldi	r30, 0x00	; 0
 394:	f4 e0       	ldi	r31, 0x04	; 4
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	81 87       	std	Z+9, r24	; 0x09
		if(PORTA.IN & 0x04){
 39a:	80 85       	ldd	r24, Z+8	; 0x08
 39c:	82 ff       	sbrs	r24, 2
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <__vector_3+0xb6>
			if(counterUsed == 0){
 3a0:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
 3a4:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
 3a8:	89 2b       	or	r24, r25
 3aa:	19 f5       	brne	.+70     	; 0x3f2 <__vector_3+0xe6>
				TCB0.CNT = 0;
 3ac:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__RODATA_PM_OFFSET__+0x7f8a4a>
 3b0:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__RODATA_PM_OFFSET__+0x7f8a4b>
				counterUsed = 2;
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <__data_end>
 3bc:	90 93 09 3e 	sts	0x3E09, r25	; 0x803e09 <__data_end+0x1>
 3c0:	18 c0       	rjmp	.+48     	; 0x3f2 <__vector_3+0xe6>
			}
		}
		else{
			if(counterUsed == 2){
 3c2:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <__data_end>
 3c6:	90 91 09 3e 	lds	r25, 0x3E09	; 0x803e09 <__data_end+0x1>
 3ca:	02 97       	sbiw	r24, 0x02	; 2
 3cc:	91 f4       	brne	.+36     	; 0x3f2 <__vector_3+0xe6>
				counterUsed = 0;
 3ce:	10 92 08 3e 	sts	0x3E08, r1	; 0x803e08 <__data_end>
 3d2:	10 92 09 3e 	sts	0x3E09, r1	; 0x803e09 <__data_end+0x1>
				timeA2 = TCB0.CNT;
 3d6:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <__RODATA_PM_OFFSET__+0x7f8a4a>
 3da:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <__RODATA_PM_OFFSET__+0x7f8a4b>
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
 3e6:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 3ea:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 3ee:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
			}
		}
	}
	
}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <main>:
int main(void)
{
	PORTA.DIR &= 0x00;
 408:	e0 e0       	ldi	r30, 0x00	; 0
 40a:	f4 e0       	ldi	r31, 0x04	; 4
 40c:	80 81       	ld	r24, Z
 40e:	10 82       	st	Z, r1
	PORTA.PIN1CTRL |= 0x09;
 410:	81 89       	ldd	r24, Z+17	; 0x11
 412:	89 60       	ori	r24, 0x09	; 9
 414:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL |= 0x09;
 416:	82 89       	ldd	r24, Z+18	; 0x12
 418:	89 60       	ori	r24, 0x09	; 9
 41a:	82 8b       	std	Z+18, r24	; 0x12
	
	PORTB.DIR |= 0x38;
 41c:	e0 e2       	ldi	r30, 0x20	; 32
 41e:	f4 e0       	ldi	r31, 0x04	; 4
 420:	80 81       	ld	r24, Z
 422:	88 63       	ori	r24, 0x38	; 56
 424:	80 83       	st	Z, r24
	PORTC.DIR |= 0x08;
 426:	e0 e4       	ldi	r30, 0x40	; 64
 428:	f4 e0       	ldi	r31, 0x04	; 4
 42a:	80 81       	ld	r24, Z
 42c:	88 60       	ori	r24, 0x08	; 8
 42e:	80 83       	st	Z, r24
	clkInit();
 430:	84 de       	rcall	.-760    	; 0x13a <clkInit>
	timerBInit();
 432:	79 de       	rcall	.-782    	; 0x126 <timerBInit>
	timerAInit();
 434:	64 de       	rcall	.-824    	; 0xfe <timerAInit>
	sei();
 436:	78 94       	sei
	while (1)
	{
		setMotor(0,m1Speed);
 438:	40 91 0c 3e 	lds	r20, 0x3E0C	; 0x803e0c <m1Speed>
 43c:	50 91 0d 3e 	lds	r21, 0x3E0D	; 0x803e0d <m1Speed+0x1>
 440:	05 2e       	mov	r0, r21
 442:	00 0c       	add	r0, r0
 444:	66 0b       	sbc	r22, r22
 446:	77 0b       	sbc	r23, r23
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	80 de       	rcall	.-768    	; 0x14e <setMotor>
		setMotor(1,m2Speed);
 44e:	40 91 0a 3e 	lds	r20, 0x3E0A	; 0x803e0a <m2Speed>
 452:	50 91 0b 3e 	lds	r21, 0x3E0B	; 0x803e0b <m2Speed+0x1>
 456:	05 2e       	mov	r0, r21
 458:	00 0c       	add	r0, r0
 45a:	66 0b       	sbc	r22, r22
 45c:	77 0b       	sbc	r23, r23
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	75 de       	rcall	.-790    	; 0x14e <setMotor>
		
		m1Speed = Clamp(map(timeA1, 10052, 20504, -255, 255),-255,255);
 464:	60 91 04 3e 	lds	r22, 0x3E04	; 0x803e04 <timeA1>
 468:	70 91 05 3e 	lds	r23, 0x3E05	; 0x803e05 <timeA1+0x1>
 46c:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <timeA1+0x2>
 470:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <timeA1+0x3>
 474:	1f 92       	push	r1
 476:	1f 92       	push	r1
 478:	1f 92       	push	r1
 47a:	cf ef       	ldi	r28, 0xFF	; 255
 47c:	cf 93       	push	r28
 47e:	aa 24       	eor	r10, r10
 480:	a3 94       	inc	r10
 482:	bb 24       	eor	r11, r11
 484:	ba 94       	dec	r11
 486:	cb 2c       	mov	r12, r11
 488:	db 2c       	mov	r13, r11
 48a:	18 e1       	ldi	r17, 0x18	; 24
 48c:	e1 2e       	mov	r14, r17
 48e:	10 e5       	ldi	r17, 0x50	; 80
 490:	f1 2e       	mov	r15, r17
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	10 e0       	ldi	r17, 0x00	; 0
 496:	24 e4       	ldi	r18, 0x44	; 68
 498:	37 e2       	ldi	r19, 0x27	; 39
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	e6 dd       	rcall	.-1076   	; 0x6c <map>
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	dc 01       	movw	r26, r24
 4aa:	cb 01       	movw	r24, r22
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	7f ef       	ldi	r23, 0xFF	; 255
 4b4:	1a de       	rcall	.-972    	; 0xea <Clamp>
 4b6:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <m1Speed>
 4ba:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <m1Speed+0x1>
		m2Speed = Clamp(map(timeA2, 10052, 20504, -255, 255),-255,255);
 4be:	60 91 00 3e 	lds	r22, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 4c2:	70 91 01 3e 	lds	r23, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 4c6:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 4ca:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
 4ce:	1f 92       	push	r1
 4d0:	1f 92       	push	r1
 4d2:	1f 92       	push	r1
 4d4:	cf 93       	push	r28
 4d6:	24 e4       	ldi	r18, 0x44	; 68
 4d8:	37 e2       	ldi	r19, 0x27	; 39
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	c6 dd       	rcall	.-1140   	; 0x6c <map>
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	dc 01       	movw	r26, r24
 4ea:	cb 01       	movw	r24, r22
 4ec:	4f ef       	ldi	r20, 0xFF	; 255
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	7f ef       	ldi	r23, 0xFF	; 255
 4f4:	fa dd       	rcall	.-1036   	; 0xea <Clamp>
 4f6:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <m2Speed>
 4fa:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <m2Speed+0x1>
 4fe:	9c cf       	rjmp	.-200    	; 0x438 <main+0x30>

00000500 <__mulsi3>:
 500:	db 01       	movw	r26, r22
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	27 d0       	rcall	.+78     	; 0x556 <__muluhisi3>
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	a2 9f       	mul	r26, r18
 50e:	80 0d       	add	r24, r0
 510:	91 1d       	adc	r25, r1
 512:	a3 9f       	mul	r26, r19
 514:	90 0d       	add	r25, r0
 516:	b2 9f       	mul	r27, r18
 518:	90 0d       	add	r25, r0
 51a:	11 24       	eor	r1, r1
 51c:	08 95       	ret

0000051e <__divmodsi4>:
 51e:	05 2e       	mov	r0, r21
 520:	97 fb       	bst	r25, 7
 522:	16 f4       	brtc	.+4      	; 0x528 <__divmodsi4+0xa>
 524:	00 94       	com	r0
 526:	0f d0       	rcall	.+30     	; 0x546 <__negsi2>
 528:	57 fd       	sbrc	r21, 7
 52a:	05 d0       	rcall	.+10     	; 0x536 <__divmodsi4_neg2>
 52c:	1e d0       	rcall	.+60     	; 0x56a <__udivmodsi4>
 52e:	07 fc       	sbrc	r0, 7
 530:	02 d0       	rcall	.+4      	; 0x536 <__divmodsi4_neg2>
 532:	46 f4       	brtc	.+16     	; 0x544 <__divmodsi4_exit>
 534:	08 c0       	rjmp	.+16     	; 0x546 <__negsi2>

00000536 <__divmodsi4_neg2>:
 536:	50 95       	com	r21
 538:	40 95       	com	r20
 53a:	30 95       	com	r19
 53c:	21 95       	neg	r18
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	4f 4f       	sbci	r20, 0xFF	; 255
 542:	5f 4f       	sbci	r21, 0xFF	; 255

00000544 <__divmodsi4_exit>:
 544:	08 95       	ret

00000546 <__negsi2>:
 546:	90 95       	com	r25
 548:	80 95       	com	r24
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__muluhisi3>:
 556:	2b d0       	rcall	.+86     	; 0x5ae <__umulhisi3>
 558:	a5 9f       	mul	r26, r21
 55a:	90 0d       	add	r25, r0
 55c:	b4 9f       	mul	r27, r20
 55e:	90 0d       	add	r25, r0
 560:	a4 9f       	mul	r26, r20
 562:	80 0d       	add	r24, r0
 564:	91 1d       	adc	r25, r1
 566:	11 24       	eor	r1, r1
 568:	08 95       	ret

0000056a <__udivmodsi4>:
 56a:	a1 e2       	ldi	r26, 0x21	; 33
 56c:	1a 2e       	mov	r1, r26
 56e:	aa 1b       	sub	r26, r26
 570:	bb 1b       	sub	r27, r27
 572:	fd 01       	movw	r30, r26
 574:	0d c0       	rjmp	.+26     	; 0x590 <__udivmodsi4_ep>

00000576 <__udivmodsi4_loop>:
 576:	aa 1f       	adc	r26, r26
 578:	bb 1f       	adc	r27, r27
 57a:	ee 1f       	adc	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	a2 17       	cp	r26, r18
 580:	b3 07       	cpc	r27, r19
 582:	e4 07       	cpc	r30, r20
 584:	f5 07       	cpc	r31, r21
 586:	20 f0       	brcs	.+8      	; 0x590 <__udivmodsi4_ep>
 588:	a2 1b       	sub	r26, r18
 58a:	b3 0b       	sbc	r27, r19
 58c:	e4 0b       	sbc	r30, r20
 58e:	f5 0b       	sbc	r31, r21

00000590 <__udivmodsi4_ep>:
 590:	66 1f       	adc	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	88 1f       	adc	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	1a 94       	dec	r1
 59a:	69 f7       	brne	.-38     	; 0x576 <__udivmodsi4_loop>
 59c:	60 95       	com	r22
 59e:	70 95       	com	r23
 5a0:	80 95       	com	r24
 5a2:	90 95       	com	r25
 5a4:	9b 01       	movw	r18, r22
 5a6:	ac 01       	movw	r20, r24
 5a8:	bd 01       	movw	r22, r26
 5aa:	cf 01       	movw	r24, r30
 5ac:	08 95       	ret

000005ae <__umulhisi3>:
 5ae:	a2 9f       	mul	r26, r18
 5b0:	b0 01       	movw	r22, r0
 5b2:	b3 9f       	mul	r27, r19
 5b4:	c0 01       	movw	r24, r0
 5b6:	a3 9f       	mul	r26, r19
 5b8:	01 d0       	rcall	.+2      	; 0x5bc <__umulhisi3+0xe>
 5ba:	b2 9f       	mul	r27, r18
 5bc:	70 0d       	add	r23, r0
 5be:	81 1d       	adc	r24, r1
 5c0:	11 24       	eor	r1, r1
 5c2:	91 1d       	adc	r25, r1
 5c4:	08 95       	ret

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
